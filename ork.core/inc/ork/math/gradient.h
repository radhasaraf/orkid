////////////////////////////////////////////////////////////////
// Orkid Media Engine
// Copyright 1996-2023, Michael T. Mayers.
// Distributed under the MIT License.
// see license-mit.txt in the root of the repo, and/or https://opensource.org/license/mit/
//////////////////////////////////////////////////////////////// 

#pragma once 

///////////////////////////////////////////////////////////////////////////////

#include <ork/config/config.h>
#include <ork/object/Object.h>
#include <ork/rtti/RTTIX.inl>

///////////////////////////////////////////////////////////////////////////////
namespace ork{
///////////////////////////////////////////////////////////////////////////////

namespace reflect { class IDeserializer; }

///////////////////////////////////////////////////////////////////////////////

struct GradientBase : public ork::Object {
  DeclareAbstractX(GradientBase, ork::Object);
public: 
	GradientBase();
};

///////////////////////////////////////////////////////////////////////////////

template <typename T> struct GradLut : public orklut<float,T>
{
	
};

///////////////////////////////////////////////////////////////////////////////

template <typename T> //
struct Gradient : public GradientBase { //

	DeclareTemplateConcreteX(Gradient<T>, GradientBase);

public: 

  Gradient();

	void addDataPoint( float flerp, const T& data );
	T sample( float atlerp );

  bool preDeserialize( ork::reflect::serdes::IDeserializer& deser ) final;

  GradLut<T> _data;

};

using gradient_fvec4_t = Gradient<fvec4>;
using gradient_fvec4_ptr_t = std::shared_ptr<gradient_fvec4_t>;

///////////////////////////////////////////////////////////////////////////////
}
///////////////////////////////////////////////////////////////////////////////
