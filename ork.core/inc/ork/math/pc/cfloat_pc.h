#ifndef _CFLOAT_PC_H
#define _CFLOAT_PC_H

///////////////////////////////////////////////////////////////////////////////

#include <cstdlib>
#include <cmath>

#if defined WII
#include <revolution/os.h>
#include <revolution/base/PPCArch.h>
#endif

///////////////////////////////////////////////////////////////////////////////

namespace ork
{

///////////////////////////////////////////////////////////////////////////////
// static methods
inline float Float::Ceil(const float &a)
{
	return float(::std::ceil(a));
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::Floor(const float &a)
{
	return float(::std::floor(a));
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::Pow(const float &a, const float &b)
{
	return float(::std::pow(a, b));
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::Sqrt(const float &r)
{
#if defined(WII)
	//return __fsqrts(r);
	return float(::std::sqrt(r));
#else
	return float(::std::sqrt(r));
#endif
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::MAdd( float m1, float m2, float a1 )
{
#if defined(WII)
	return __fmadds(m1, m2, a1); 
#else
	return (m1*m2)+a1;
#endif
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::Cos(const float &x)
{
	return float(::std::cos(x));
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::Abs(const float &x)
{
#if defined(WII)
	return __fabsf(x); 
#else
	return maximum(x, -x);
#endif
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::ArcCos(const float &x)
{
	return float(::std::acos(x));
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::Sin(const float &x)
{
	return float(::std::sin(x));
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::ArcTan(const float &x)
{
	return float(::std::atan(x));
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::ArcTan2(const float &x, const float &y)
{
	return float(::std::atan2(x, y));
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::Tan(const float &x)
{
	return Sin(x) / Cos(x);
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::Min(const float &a, const float &b)
{
	return a < b ? a : b;
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::Max(const float &a, const float &b)
{
	return a > b ? a : b;
}

///////////////////////////////////////////////////////////////////////////////

inline float Float::Rand(float low, float high)
{
	static const float fdivis( 1.0f / 32768.0f );
	float fdiff = (high-low);
	float frand = float(::std::rand()&0x00007fff)*fdivis;
	return low+(frand*fdiff);
}

///////////////////////////////////////////////////////////////////////////////

inline bool Float::RelCompare(const float& a, const float& b, const float& toler)
{
	return Float::Abs(a - b) <= toler * Float::Max(1.0f, Float::Max(a, b));
}

///////////////////////////////////////////////////////////////////////////////
}
///////////////////////////////////////////////////////////////////////////////

#endif
