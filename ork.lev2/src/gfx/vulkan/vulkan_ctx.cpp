#include "vulkan_ctx.h"

ImplementReflectionX(ork::lev2::vulkan::VkContext, "VkContext");

///////////////////////////////////////////////////////////////////////////////
namespace ork::lev2::vulkan {
///////////////////////////////////////////////////////////////////////////////

void VkContext::describeX(class_t* clazz) {

}

void VkContext::VKinit() {
}

///////////////////////////////////////////////////////

bool VkContext::HaveExtension(const std::string& extname) {
  return false;
}

///////////////////////////////////////////////////////////////////////////////

VkContext::VkContext() {
}

///////////////////////////////////////////////////////

VkContext::~VkContext() {
}

///////////////////////////////////////////////////////

void VkContext::FxInit() {
}

///////////////////////////////////////////////////////////////////////

void VkContext::_doResizeMainSurface(int iw, int ih) {
}

///////////////////////////////////////////////////////

void VkContext::_doBeginFrame() {
}

///////////////////////////////////////////////////////
void VkContext::_doEndFrame() {
}

///////////////////////////////////////////////////////

void* VkContext::_doClonePlatformHandle() const {
  return nullptr;
}

//////////////////////////////////////////////
// Interfaces

FxInterface* VkContext::FXI() {
  return nullptr;
}

///////////////////////////////////////////////////////

ImmInterface* VkContext::IMI() {
  return nullptr;
}

///////////////////////////////////////////////////////
RasterStateInterface* VkContext::RSI() {

  return nullptr;
}
///////////////////////////////////////////////////////

MatrixStackInterface* VkContext::MTXI() {
  return nullptr;
}
///////////////////////////////////////////////////////

GeometryBufferInterface* VkContext::GBI() {
  return nullptr;
}
///////////////////////////////////////////////////////

FrameBufferInterface* VkContext::FBI() {
  return nullptr;
}
///////////////////////////////////////////////////////

TextureInterface* VkContext::TXI() {
  return nullptr;
}
///////////////////////////////////////////////////////

#if defined(ENABLE_COMPUTE_SHADERS)
ComputeInterface* VkContext::CI() {
  return nullptr;
};
#endif
///////////////////////////////////////////////////////

DrawingInterface* VkContext::DWI() {
  return nullptr;
}
// GlFrameBufferInterface& GLFBI() {
// return mFbI;
//}

///////////////////////////////////////////////////////////////////////

void VkContext::makeCurrentContext(void) {
}

// void debugLabel(GLenum target, GLuint object, std::string name);

//////////////////////////////////////////////

//////////////////////////////////////////////

// void AttachGLContext(CTXBASE* pCTFL);
// void SwapGLContext(CTXBASE* pCTFL);

///////////////////////////////////////////////////////

void VkContext::swapBuffers(CTXBASE* ctxbase) {
}

///////////////////////////////////////////////////////

void VkContext::initializeWindowContext(Window* pWin, CTXBASE* pctxbase) {

} // make a window

///////////////////////////////////////////////////////

void VkContext::initializeOffscreenContext(DisplayBuffer* pBuf) {

} // make a pbuffer

///////////////////////////////////////////////////////
void VkContext::initializeLoaderContext() {
}

///////////////////////////////////////////////////////

void VkContext::debugPushGroup(const std::string str) {
}

///////////////////////////////////////////////////////

void VkContext::debugPopGroup() {
}

///////////////////////////////////////////////////////

void VkContext::debugMarker(const std::string str) {
}

///////////////////////////////////////////////////////

void VkContext::TakeThreadOwnership() {
}

///////////////////////////////////////////////////////

bool VkContext::SetDisplayMode(DisplayMode* mode) {
  return false;
}
///////////////////////////////////////////////////////
void* VkContext::_doBeginLoad() {
  return nullptr;
}
///////////////////////////////////////////////////////
void VkContext::_doEndLoad(void* ploadtok) {
}
///////////////////////////////////////////////////////////////////////////////
} // namespace ork::lev2::vulkan
///////////////////////////////////////////////////////////////////////////////
