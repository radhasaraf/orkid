#include <ork/pch.h>
#include <ork/lev2/gfx/gfxenv.h>
#include <ork/lev2/gfx/rtgroup.h>
#include <ork/lev2/ui/viewport.h>
#include <ork/lev2/ui/event.h>
#include <ork/lev2/gfx/gfxmaterial_ui.h>
#include <ork/util/hotkey.h>
#include <ork/lev2/gfx/dbgfontman.h>
#include <ork/lev2/gfx/gfxprimitives.h>

namespace ork::ui {
///////////////////////////////////////////////////////////////////////////////
Rect::Rect(int x, int y, int w, int h) {
  _x = OldStlSchoolClampToRange(x, 0, 16384);
  _y = OldStlSchoolClampToRange(y, 0, 16384);
  _w = OldStlSchoolClampToRange(w, 32, 16384);
  _h = OldStlSchoolClampToRange(h, 32, 16384);
}
///////////////////////////////////////////////////////////////////////////////
Rect::Rect() {
  _x = 0;
  _y = 0;
  _w = 32;
  _h = 32;
}
///////////////////////////////////////////////////////////////////////////////
SRect Rect::asSRect() const {
  SRect rval(_x, _y, _w, _h);
  return rval;
}
///////////////////////////////////////////////////////////////////////////////
int Rect::x2() const {
  return _x + _w;
}
///////////////////////////////////////////////////////////////////////////////
int Rect::y2() const {
  return _y + _h;
}
///////////////////////////////////////////////////////////////////////////////
int Rect::center_x() const {
  return _x + (_w >> 1);
}
///////////////////////////////////////////////////////////////////////////////
int Rect::center_y() const {
  return _y + (_h >> 1);
}
///////////////////////////////////////////////////////////////////////////////
void Rect::moveTop(int y) {
  int dy = _y - y;
  _y     = y;
  _h += dy;
}
///////////////////////////////////////////////////////////////////////////////
void Rect::moveLeft(int x) {
  int dx = _x - x;
  _x     = x;
  _w += dx;
}
///////////////////////////////////////////////////////////////////////////////
void Rect::moveBottom(int y) {
  int dy = _y - y;
  _y     = y;
  _h += dy;
}
///////////////////////////////////////////////////////////////////////////////
void Rect::moveRight(int x) {
  int dx = _x - x;
  _x     = x;
  _w += dx;
}
///////////////////////////////////////////////////////////////////////////////
void Rect::moveCenter(int x, int y) {
}
///////////////////////////////////////////////////////////////////////////////
void Rect::setTop(int y) {
  int dy = _y - y;
  _y     = y;
  _h += dy;
}
///////////////////////////////////////////////////////////////////////////////
void Rect::setLeft(int x) {
  int dx = _x - x;
  _x     = x;
  _w += dx;
}
///////////////////////////////////////////////////////////////////////////////
void Rect::setBottom(int y) {
  int dy = _y - y;
  _y     = y;
  _h += dy;
}
///////////////////////////////////////////////////////////////////////////////
void Rect::setRight(int x) {
  int dx = _x - x;
  _x     = x;
  _w += dx;
}
///////////////////////////////////////////////////////////////////////////////
void Rect::reset() {
  _x = 0;
  _y = 0;
  _w = 0;
  _h = 0;
}
///////////////////////////////////////////////////////////////////////////////
bool Rect::isPointInside(int x, int y) const {
  return (x >= _x) and (x <= x2()) and (y >= _y) and (y <= y2());
}
/////////////////////////////////////////////////////////////////////////
} // namespace ork::ui
