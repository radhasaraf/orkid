///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
import "orkshader://mathtools.i";
import "orkshader://envtools.i";
import "orkshader://brdftools.i";
import "orkshader://deftools.i";
import "orkshader://gbuftools.i";
}
///////////////////////////////////////////////////////////////
uniform_set ub_vtx {
  mat4 MVPC;
  mat4 MVPL;
  mat4 MVPR;
}
///////////////////////////////////////////////////////////////
uniform_set ub_frg {
  mat4 IVPArray[2];
  mat4 VArray[2];
  mat4 PArray[2];
  usampler2D MapGBuffer;
  sampler2D MapDepthCluster;
  sampler2D MapDepth;
  sampler2D MapSpecularEnv;
  sampler2D MapDiffuseEnv;
  sampler2D MapBrdfIntegration;
  sampler2D MapLightingCookie;
  sampler2D MapShadowDepth;
  sampler2D ProjectionTexture;
  sampler3D MapVolTexA;

  vec2 near_far;
  mat4 ProjectionTextureMatrix;
  vec3 ProjectionEyePostion;
  vec3 EyePostion;
  vec2 InvViewportSize; // inverse target size
  float Time;
  vec2 NearFar;
  int NumLights;
  int TileDim;
  vec2 Zndc2eye;
  float SkyboxLevel;
  float SpecularLevel;
  float DiffuseLevel;
  vec3 AmbientLevel;
  float SpecularMipBias;
  float EnvironmentMipBias;
  float EnvironmentMipScale;
  float DepthFogDistance;
  float DepthFogPower;
  vec4 ShadowParams;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_v2uv : ub_vtx {
  inputs {
    vec4 position : POSITION;
    vec2 uv0 : TEXCOORD0;
    vec2 uv1 : TEXCOORD1;
  }
  outputs {
    vec2 frg_uva;
    vec2 frg_uvb;
  }
}
fragment_interface iface_f2uv {
  inputs {
    vec2 frg_uva;
    vec2 frg_uvb;
  }
  outputs {
    vec4 colorOUT;
  }
}
///////////////////////////////////////////////////////////////
libblock lib_deferred //
  : ub_light // 
  : ub_frg // 
  : lib_math // 
  : lib_envmapping // 
  : lib_cellnoise // 
  : lib_brdf // 
  : lib_gbuf_decode // 
  : lib_def //
  : lib_mmnoise { //

float LinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0; // Back to NDC 
    float nearPlane = near_far.x;
    float farPlane = near_far.y;
    return (2.0 * nearPlane * farPlane) / (farPlane + nearPlane - z * (farPlane - nearPlane));
}

}
///////////////////////////////////////////////////////////////
vertex_shader vs_passthru2uv : iface_v2uv {
  frg_uva     = uv0;
  frg_uvb     = uv1;
  gl_Position = position;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_environment //
    : iface_f2uv               //
    : lib_deferred {           //
  WPosData wpd     = monoWPD();
  GBufData gbd     = decodeGBUF(wpd);
  vec3 wpos = gbd._wpos;

  vec2 uv          = wpd._muv;
  vec3 view_epos0  = posatdepth(wpd, 0.0);
  vec3 view_epos1  = posatdepth(wpd, 1.0);
  vec3 VIEW_N      = normalize(view_epos1 - view_epos0);
  vec3 skybox_n    = vec3(VIEW_N.x, VIEW_N.y, VIEW_N.z);
  vec3 skyboxColor = env_equirectangularFlipV(skybox_n, MapSpecularEnv, EnvironmentMipBias) * SkyboxLevel;
  vec3 out_color   = skybox_n;

  if (gbd._mode == 1) {
    vec4 projspace_point = ProjectionTextureMatrix*vec4(wpos,1);
    float projspace_depth = projspace_point.z;///projspace_point.w;
    projspace_depth -= 0.1;

    projspace_point.xyz = projspace_point.xyz / projspace_point.w;
    vec3 prj_uv = projspace_point.xyz * 0.5 + vec3(0.5);
    //
    float shadow_depth = texture(MapShadowDepth, prj_uv.xy).r;
    shadow_depth = LinearizeDepth(shadow_depth);
    float bias = 0.005;
    //shadow_depth -= bias;
     
    vec3 pt = texture(ProjectionTexture, prj_uv.xy).xyz;

    out_color = mod(wpos,1);

    float sd_mod_1 = mod(projspace_depth,1);
    if(projspace_depth>=0.0){
      if(projspace_depth<1.0){
        out_color = vec3(0,sd_mod_1,0);
      }
      else{
        out_color = vec3(sd_mod_1,sd_mod_1,0);
      }
    }
    else{
      out_color = vec3(sd_mod_1,0,sd_mod_1);
    }

    if( projspace_depth < shadow_depth ) {
      out_color = vec3(1,0,1);
    } else {
      out_color = vec3(0);
    }
    float delta = projspace_depth-shadow_depth;
    if(projspace_depth>=5.0){
      //out_color = vec3(mod(delta,1));
      out_color = vec3(1,1,1);
    }
    else if(projspace_depth<0.0)
      out_color = vec3(0,1,1);
    //out_color = vec3(pow(projspace_depth,0.5));
    //out_color = pt;
    if(prj_uv.x<0 || prj_uv.x>1 || prj_uv.y<0 || prj_uv.y>1)
      out_color = vec3(1,0,0);
    //if( (-projspace_depth) > (shadow_depth) )
    //  out_color = vec3(0,0,0);
      //out_color = vec3(projspace_depth);
  }
  colorOUT = vec4(out_color, 1);
}
///////////////////////////////////////////////////////////////
technique environmentlighting {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_passthru2uv;
    fragment_shader = ps_environment;
    state_block     = default;
  }
}
