///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
	glsl_version = "130";
  //import "orkshader://pbrtools.i";
  import "orkshader://mathtools.i";
  import "orkshader://misctools.i";
  import "orkshader://envtools.i";
  import "orkshader://brdftools.i";
  import "orkshader://gbuftools.i";
}
///////////////////////////////////////////////////////////////
uniform_set ub_sdf_frg {
  vec2 InvViewportSize;
  float Time;
  float Near;
  float Far;
  mat4 IVP;
  sampler2D MapDepth;
  sampler3D MapVolTexA;
  sampler3D MapVolTexB;
  float Displacement;
  float RepeatPeriod;
  float NoisePowerA;
  float NoisePowerB;
  vec3 ColorA;
  vec3 ColorB;
  float IntensityA;
  float IntensityB;
  float FeatureScale;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_sdf_vgbuffer
	: ub_sdf_frg {
  inputs {
    vec4 position : POSITION;
	}
  outputs {
	}
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fdownsampledepthcluster : ub_sdf_frg {
  inputs {
  }
  outputs { layout(location = 0) uvec4 out_gbuf; }
}
///////////////////////////////////////////////////////////////
// vs identity
///////////////////////////////////////////////////////////////
vertex_shader vs_identity
	: iface_sdf_vgbuffer{
  gl_Position = position;    
}
/////////////////////////////////////////////////////////
libblock lib_sdf : ub_sdf_frg {
///////////////////////////////////////////////////////////////
float distance_from_sphere(in vec3 p, in vec3 c, float r) {
  return length(p - c) - r;
}
/////////////////////////////////////////////////////////
float16_t distanceToVTEX(sampler3D vtex, vec3 p, vec3 oscale){
  vec3 pp = p / oscale;
  return float16_t(texture(vtex,pp+vec3(0.5)).x);
}
/////////////////////////////////////////////////////////
float16_t worldSDF(in vec3 p) {
  float distance = distanceToVTEX(MapVolTexA,p,vec3(10,3,10)*Displacement).x;
  //distance += octavenoise(MapVolTexB,p*FeatureScale,vec3(0,1,0),Time,2)*NoisePowerB;
  return float16_t(distance);
}
vec3 worldNormalSDF( in vec3 p ) // for function f(p)
{
    const float h = Displacement*0.1; // replace by an appropriate value
    const vec2 k = vec2(1,-1);
    return normalize( k.xyy*worldSDF( p + k.xyy*h ) + 
                      k.yyx*worldSDF( p + k.yyx*h ) + 
                      k.yxy*worldSDF( p + k.yxy*h ) + 
                      k.xxx*worldSDF( p + k.xxx*h ) );
}
/////////////////////////////////////////////////////////
vec3 posatdepth(vec2 muv, mat4 ivp, float depth){
  vec2 scrxy     = muv * 2.0 - vec2(1, 1);
  vec3 inpos     = vec3(scrxy.x, scrxy.y, depth * 2 - 1.0);
  vec4 rr        = ivp * vec4(inpos, 1);
  vec3 pos    = vec3(rr.xyz / rr.w);
  return pos;
}
/////////////////////////////////////////////////////////
vec3 Luminance(vec3 pos){
  return vec3(0.1);
}
///////////////////////////////////////////////////////////////
} // libblock lib_sdf : ub_sdf_frg {
///////////////////////////////////////////////////////////////
fragment_shader ps_sdfscene 
              : extension(GL_NV_gpu_shader5)
              : iface_fdownsampledepthcluster 
              : lib_mmnoise 
              : lib_sdf 
              : lib_gbuf_encode {

  	vec2 muv   = gl_FragCoord.xy * InvViewportSize;

    vec3 epos0    = posatdepth(muv,IVP,0);
    vec3 epos1   = posatdepth(muv,IVP,1);
    vec3 view_normal = normalize(epos1-epos0);

    const float SDF_EPSILON = 0.001;
    const int MAX_NUM_STEPS = 9999;
    const float STEP_SIZE = 0.001;

    float total_distance_traveled = 0.0;

		bool emissive = true;
    float depthtex = textureLod(MapDepth, muv,0).r;
    float ndc      = depthtex * 2.0 - 1.0;
    float lin_num = (2.0 * Near * Far);
    float lin_den = (Far + Near - ndc * (Far - Near));
    float linZ = lin_num / lin_den;

    ////////////////////////////////////////////////
    // Raymarching loop
    ////////////////////////////////////////////////

    bool touched_cloud = false;

    float atmosIntegtated = 0.0;
    float opaqueVisiblity = 1.0;
    const float16_t ambientLight = 0.3;
    const float16_t volumeAlbedo = 1.0;

    for (int i = 0; i < MAX_NUM_STEPS; ++i)
    {
      vec3 vec_d = view_normal*total_distance_traveled;
      vec3 current_position = epos0 + vec_d;

      float16_t distance_SDF = float16_t(worldSDF(current_position));

      ////////////////////////////////////////////////

      bool was_hit = (distance_SDF < SDF_EPSILON);

      if (was_hit) { // hit

            out_gbuf = packGbufferA(NoisePowerA*float(i), 
                                IntensityB);
            return;

            float previousOpaqueVisiblity = opaqueVisiblity;
            float16_t absortion = 0.1; //max(-distance_SDF, 0);
            opaqueVisiblity *= float(exp(-absortion * STEP_SIZE));
            //float luminance = float(pow((0.1+distance_SDF),RepeatPeriod));

            float16_t absorptionFromMarch = float16_t(previousOpaqueVisiblity - opaqueVisiblity);

            ////////////////////////////
            // scattering
            ////////////////////////////
            
            //float integScatt = luminance - luminance * transmittance;
            //atmosIntegtated += integScatt * opaqueVisiblity;

            atmosIntegtated += (absorptionFromMarch * volumeAlbedo * ambientLight);//GetAmbientLight();

            if (opaqueVisiblity < 0.003) {
                opaqueVisiblity = 0.0;
                break;
            }

            touched_cloud = true;

      }

      total_distance_traveled += float(was_hit ? STEP_SIZE : max(distance_SDF*0.5,STEP_SIZE));    

      ////////////////////////////////////////////////
      // check for misses
      ////////////////////////////////////////////////

      if( total_distance_traveled > linZ ) { // miss
        break;
      }

    }

    if( touched_cloud ){
        out_gbuf = packGbufferA(NoisePowerA-atmosIntegtated*IntensityA, 
                                clamp((1.0-opaqueVisiblity)*IntensityB,0,1));
        //out_gbuf = packGbufferA(1);
        //float ndc_depth = (total_distance_traveled-Near)/(Far-Near);
        //gl_FragDepth = (1.0 - 0.0) * 0.5 * ndc_depth + (1.0 + 0.0) * 0.5;
    }
    else {
        discard;
    }

}
///////////////////////////////////////////////////////////////
state_block sb_default : default {}
///////////////////////////////////////////////////////////////
technique tek_sdfscene {
	fxconfig=fxcfg_default;
	vf_pass={vs_identity,ps_sdfscene,sb_default}
}
///////////////////////////////////////////////////////////////
