///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
	glsl_version = "130";
  //import "orkshader://pbrtools.i";
  import "orkshader://mathtools.i";
  import "orkshader://misctools.i";
  import "orkshader://envtools.i";
  import "orkshader://brdftools.i";
  import "orkshader://gbuftools.i";
}
///////////////////////////////////////////////////////////////
uniform_set ub_sdf_frg {
  vec2 InvViewportSize;
  float Time;
  float Near;
  float Far;
  mat4 IVP;
  sampler2D MapDepth;
  sampler3D MapVolTexA;
  float Displacement;
  float RepeatPeriod;
  float NoisePowerA;
  float NoisePowerB;
  vec3 ColorA;
  vec3 ColorB;
  float IntensityA;
  float IntensityB;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_sdf_vgbuffer
	: ub_sdf_frg {
  inputs {
    vec4 position : POSITION;
	}
  outputs {
	}
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fdownsampledepthcluster : ub_sdf_frg {
  inputs {
  }
  outputs { layout(location = 0) uvec4 out_gbuf; }
}
///////////////////////////////////////////////////////////////
// vs identity
///////////////////////////////////////////////////////////////
vertex_shader vs_identity
	: iface_sdf_vgbuffer{
  gl_Position = position;    
}
/////////////////////////////////////////////////////////
libblock lib_sdf : ub_sdf_frg {
///////////////////////////////////////////////////////////////
float distance_from_sphere(in vec3 p, in vec3 c, float r) {
  return length(p - c) - r;
}
/////////////////////////////////////////////////////////
float repeat_domain( in vec3 p, in vec3 rep_freq ) {
  vec3 q = mod(p+0.5*rep_freq,rep_freq)-0.5*rep_freq;
  return distance_from_sphere(q, vec3(0,0,0), 2);
}
/////////////////////////////////////////////////////////
float worldSDF(in vec3 p) {
  float t = Time*0.3;
  float displacement = sin(5.0 * p.x + t) * sin(3.0 * p.y + t*2) * sin(7.0 * p.z + t*3) * Displacement;
  float sphere_0 = repeat_domain(p, vec3(RepeatPeriod));
  return sphere_0 + displacement;
}
/////////////////////////////////////////////////////////
vec3 worldNormalSDF(in vec3 p) {
  const vec3 small_step = vec3(0.01, 0.0, 0.0);
  float gradient_x = worldSDF(p + small_step.xyy) - worldSDF(p - small_step.xyy);
  float gradient_y = worldSDF(p + small_step.yxy) - worldSDF(p - small_step.yxy);
  float gradient_z = worldSDF(p + small_step.yyx) - worldSDF(p - small_step.yyx);
  vec3 normal = vec3(gradient_x, gradient_y, gradient_z);
  return normalize(normal);
}
/////////////////////////////////////////////////////////
vec3 posatdepth(vec2 muv, mat4 ivp, float depth){
  vec2 scrxy     = muv * 2.0 - vec2(1, 1);
  vec3 inpos     = vec3(scrxy.x, scrxy.y, depth * 2 - 1.0);
  vec4 rr        = ivp * vec4(inpos, 1);
  vec3 pos    = vec3(rr.xyz / rr.w);
  return pos;
}
///////////////////////////////////////////////////////////////
} // libblock lib_sdf : ub_sdf_frg {
///////////////////////////////////////////////////////////////
fragment_shader ps_sdfscene 
              : iface_fdownsampledepthcluster 
              : lib_mmnoise 
              : lib_sdf 
              : lib_gbuf_encode {

  	vec2 muv   = gl_FragCoord.xy * InvViewportSize;

    //float depthtex = textureLod(MapDepth, muv,0).r;
    //float ndc      = depthtex * 2.0 - 1.0;
    //float lin_num  = (2.0 * Near * Far);
    //float lin_den  = (Far + Near - ndc * (Far - Near));
    //float lin_Z    = lin_num / lin_den;
    //float xxx_Z    = (lin_Z-Near)/(Far-Near);

    vec3 epos0    = posatdepth(muv,IVP,0);
    vec3 epos1   = posatdepth(muv,IVP,1);
    vec3 view_normal = normalize(epos1-epos0);

    const float SDF_EPSILON = 0.01;
    const int MAX_NUM_STEPS = 9999;

    float total_distance_traveled = 0;

    vec3 color = vec3(2,2,2.5);

    ////////////////////////////////////////////////
    // Raymarching loop
    ////////////////////////////////////////////////

    for (int i = 0; i < MAX_NUM_STEPS; ++i)
    {
      vec3 vec_d = view_normal*total_distance_traveled;
      vec3 current_position = epos0 + vec_d;

      float distance_SDF = worldSDF(current_position);

      ////////////////////////////////////////////////

      if (distance_SDF < SDF_EPSILON) { // hit
          vec3 normal = worldNormalSDF(current_position);
          vec3 light_position = vec3(2.0, -5.0, 3.0);
          vec3 direction_to_light = normalize(current_position - light_position);
          float diffuse_intensity = max(0.0, dot(normal, direction_to_light));

          float nze = octavenoise(MapVolTexA,current_position*0.5,Time,16);
          float roughness = pow(nze,NoisePowerA);
          float metallic = 1.0 - roughness;
          nze = pow(nze,NoisePowerB);
          color = mix(ColorA*IntensityA,ColorB*IntensityB,nze);

					out_gbuf = packGbuffer(color,vec3(0),normal,roughness,metallic);

          float ndc_depth = (total_distance_traveled-Near)/(Far-Near);
          gl_FragDepth = (1.0 - 0.0) * 0.5 * ndc_depth + (1.0 + 0.0) * 0.5;

          break;
      }

      ////////////////////////////////////////////////
      // check for misses
      ////////////////////////////////////////////////

      total_distance_traveled += distance_SDF*0.1;    

      if( total_distance_traveled > Far ) { //lin_Z ) { // miss
			    discard;
          break;
      }
    }
}
///////////////////////////////////////////////////////////////
state_block sb_default : default {}
///////////////////////////////////////////////////////////////
technique tek_sdfscene {
	fxconfig=fxcfg_default;
	vf_pass={vs_identity,ps_sdfscene,sb_default}
}
///////////////////////////////////////////////////////////////
