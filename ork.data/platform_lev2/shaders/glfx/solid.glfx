///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default
{
	glsl_version = "130";
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
vertex_interface iface_vdefault
{
	uniform mat4        MatMVP;
	uniform mat4        MatMV;
	uniform mat4        MatM;
	uniform mat4        MatV;
	uniform mat4        MatP;
	uniform mat4        MatAux;

	uniform vec4          modcolor;
	uniform float           Time;

	//
	in vec4 position : POSITION;
	in vec4 vtxcolor : COLOR0;
	in vec2 uv0 : TEXCOORD0;
	in vec2 uv1 : TEXCOORD1;
	//
	out vec4 frg_clr;
	out vec2 frg_uv;
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fdefault
{
	in vec4 frg_clr;
	in vec2 frg_uv;
	//
	out vec4 out_clr;
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fmt
{
	uniform vec4 ModColor;
	uniform sampler2D ColorMap;
	uniform sampler2D ColorMap2;
	uniform sampler2D ColorMap3;
	//
	out vec4 out_clr;
	//
	in vec2 frg_uv;
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default
{
	inherits default;
}
///////////////////////////////////////////////////////////////
state_block sb_lerpblend
{
	inherits sb_default;
	BlendMode = ALPHA;
}
///////////////////////////////////////////////////////////////
state_block sb_additive
{
	inherits sb_default;
	BlendMode = ADDITIVE;
}
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
vertex_shader vs_uitext : iface_vdefault
{
	gl_Position = MatMVP*position;
	frg_clr = vtxcolor;
	frg_uv = uv0;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_uitext : iface_fmt
{
	vec4 texc = texture( ColorMap, frg_uv );
	if( texc.r==0.0f ) discard;
	out_clr = vec4(texc.xyz*ModColor.xyz,texc.r);
}
///////////////////////////////////////////////////////////////
vertex_shader vs_vtxcolor : iface_vdefault
{
	gl_Position = MatMVP*position;
	frg_clr = vtxcolor;
	frg_uv = uv0;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_fragclr : iface_fdefault
{
	out_clr = frg_clr;
	//out_clr = vec4(1.0,0.0,1.0,1.0);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_modclr : iface_fmt
{
	out_clr = ModColor;
}
///////////////////////////////////////////////////////////////
technique vtxcolor {
fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_vtxcolor;
		fragment_shader=ps_fragclr;
		state_block=sb_default;
	}	
}
technique vtxmodcolor {
	fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_vtxcolor;
		fragment_shader=ps_fragclr;
		state_block=sb_default;
	}
}
technique mmodcolor {
fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_vtxcolor;
		fragment_shader=ps_fragclr;
		state_block=sb_default;
	}	
}
technique texcolor {
	fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_vtxcolor;
		fragment_shader=ps_fragclr;
		state_block=sb_default;
	}
}
technique texcolorwrap {}
technique texcolorralp {}
technique knob {}
technique texmodcolor {}
technique textexmodcolor {}
technique texvtxcolor {}
technique texmodcolorFB {}
technique distortedfeedback {}
///////////////////////////////////////////////////////////////
