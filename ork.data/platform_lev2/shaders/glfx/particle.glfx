///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
  glsl_version = "330";
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////

uniform_set uset_vtx {
  mat4 MatM;
  mat4 MatV;
  mat4 MatP;
  mat4 MatVP;
  mat4 MatIV;
  mat4 MatIVP;
  mat4 MatMV;
  mat4 MatMVP;
  mat4 MatAux;
  vec4 modcolor;
  vec4 User0;
  vec4 User1;
  vec4 User2;
  vec4 User3;
  float Time;
  vec4 NoiseShift;
  vec4 NoiseFreq;
  vec4 NoiseAmp;
  vec2 Rtg_InvDim;
}

uniform_set uset_geo_stereo {
  mat4 MatMVPL;
  mat4 MatMVPR;
}

uniform_set uset_frg {
  vec4 modcolor;
  vec4 User0;
  sampler2D ColorMap;
  sampler2D GradientMap;
  sampler3D VolumeMap;
}

///////////////////////////////////////////////////////////////
fragment_interface fface_minimal : uset_frg {
  inputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec2 frg_uv1;
  }
  outputs {
    vec4 out_clr;
  }
}
fragment_interface fface_psys : uset_frg {
  inputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec2 frg_uv1;
  }
  outputs {
    layout(location = 0) vec4 out_clr;
    //layout(location = 1) vec4 out_normal_mdl;
    //layout(location = 2) vec4 out_rufmtl;
  }
}
fragment_interface fface_psys_stereo : uset_frg {
  inputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec2 frg_uv1;
  }
  outputs {
    layout(location = 0) vec4 out_clr;
    //layout(location = 1) vec4 out_normal_mdl;
    //layout(location = 2) vec4 out_rufmtl;
  }
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default : default {
  // DepthTest=LEQUALS;
  // DepthMask=true;
  // CullTest=PASS_FRONT;
}
///////////////////////////////////////////////////////////////
state_block sb_lerpblend : sb_default {
  BlendMode = ADDITIVE;
}
///////////////////////////////////////////////////////////////
state_block sb_additive : sb_default {
  BlendMode = ADDITIVE;
}
///////////////////////////////////////////////////////////////
state_block sb_alpadd : sb_default {
  BlendMode = ALPHA_ADDITIVE;
}
///////////////////////////////////////////////////////////////
vertex_interface vface_nogs : uset_vtx {
  inputs {
    vec4 position : POSITION;
    vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
    vec2 uv1 : TEXCOORD1;
  }
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec2 frg_uv1;
  }
}
vertex_shader vs_vtxtexcolornogs : vface_nogs {
  gl_Position  = MatMVP * position;
  gl_PointSize = 8.0;
  frg_clr      = vtxcolor.rgba;
  frg_uv0      = uv0;
  frg_uv1      = uv1;
}
///////////////////////////////////////////////////////////////
vertex_interface vface_bill : uset_vtx {
  inputs {
    vec4 position : POSITION;
    vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
    vec2 uv1 : TEXCOORD1;
  }
  outputs {
    vec4 geo_clr; // NOT an array
    vec2 geo_uv0; // NOT an array
    vec2 geo_uv1; // NOT an array
  }
}
vertex_shader vs_vtxcolor : vface_bill {
  gl_Position = position;
  geo_clr  = vtxcolor;
  geo_uv0  = uv0;
  geo_uv1  = uv1;
}
vertex_shader vs_vtxtexcolor : vface_bill {
  gl_Position = position;
  geo_clr  = vtxcolor.rgba;
  geo_uv0  = uv0;
  geo_uv1  = uv1;
}
///////////////////////////////////////////////////////////////
geometry_interface gface_base {
  inputs {
    layout(points);
  }
  outputs {
    layout(triangle_strip, max_vertices = 4);
  }
}
///////////////////////////////////////////////////////////////
geometry_interface gface_bill
    //: vface_bill // import vtxshader outputs
    : uset_vtx : gface_base {
  inputs {
    vec4 geo_clr[]; // NOW an array (broadcast)
    vec2 geo_uv0[]; // NOW an array (broadcast)
    vec2 geo_uv1[]; // NOW an array (broadcast)
  }
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec2 frg_uv1;
  }
}
///////////////////////////////////////////////////////////////
geometry_shader gs_identity : gface_bill {
  for (int n = 0; n < gl_in.length(); n++) {
    gl_Position = gl_in[n].gl_Position;
    frg_clr     = geo_clr[n];
    frg_uv0     = geo_uv0[n];
    frg_uv1     = geo_uv1[n];
    EmitVertex();
  }
  EndPrimitive();
}
///////////////////////////////////////////////////////////////
libblock lib_billboard {
  struct Input {
    vec2 inp_ang_siz;
    vec3 inp_pos;
  };
  struct Output {
    vec4 pos0;
    vec4 pos1;
    vec4 pos2;
    vec4 pos3;
  };
  Output Compute(Input inp) {
    Output outp;

    float ang         = inp.inp_ang_siz.x;
    float size_pixels = inp.inp_ang_siz.y;

    float sizX = size_pixels * Rtg_InvDim.x;
    float sizY = size_pixels * Rtg_InvDim.y;

    vec4 wpos = MatM * vec4(inp.inp_pos, 1);
    vec4 hpos = MatVP * wpos;
    vec4 dpos = hpos / hpos.w;

    vec3 p0 = dpos.xyz + vec3(-sizX, -sizY, 0);
    vec3 p1 = dpos.xyz + vec3(+sizX, -sizY, 0);
    vec3 p2 = dpos.xyz + vec3(+sizX, +sizY, 0);
    vec3 p3 = dpos.xyz + vec3(-sizX, +sizY, 0);

    outp.pos0 = vec4(p0, 1.0);
    outp.pos1 = vec4(p1, 1.0);
    outp.pos2 = vec4(p2, 1.0);
    outp.pos3 = vec4(p3, 1.0);

    return outp;
  }
}
geometry_shader gs_billboardquad //
    : lib_billboard              //
    : gface_bill {               //
  Input inp;
  inp.inp_ang_siz = geo_uv0[0];
  inp.inp_pos     = gl_in[0].gl_Position.xyz;
  Output outp     = Compute(inp);
  frg_uv1     = geo_uv1[0];
  frg_clr     = geo_clr[0];
  //////////////////////////
  gl_Position     = outp.pos0;
  frg_uv0     = vec2(0,0);
  EmitVertex();
  gl_Position = outp.pos1;
  frg_uv0     = vec2(1,0);
  EmitVertex();
  gl_Position = outp.pos3;
  frg_uv0     = vec2(0,1);
  EmitVertex();
  gl_Position = outp.pos2;
  frg_uv0     = vec2(1,1);
  EmitVertex();
  //////////////////////////
  EndPrimitive();
}
///////////////////////////////////////////////////////////////
geometry_interface gface_bill_stereo // 
  : gface_base   //
  : vface_bill { // import vtxshader outputs
  
  // TODO recursive walk up inheritance tree for attribute out->in inheritance
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec2 frg_uv1;
    layout(secondary_view_offset = 1) int gl_Layer;
  }
}
geometry_shader gs_billboardquad_stereo      //
    : gface_bill_stereo                      //
    : extension(GL_NV_stereo_view_rendering) //
    : extension(GL_NV_viewport_array2)       //
    : lib_billboard {                        //
  gl_Layer                      = 0;
  gl_ViewportMask[0]            = 1;
  gl_SecondaryViewportMaskNV[0] = 2;
  Input inp;
  inp.inp_clr            = geo_clr[0];
  inp.inp_ang_siz        = geo_uv0;
  inp.inp_uv1            = geo_uv1;
  inp.inp_pos            = gl_in[0].gl_Position.xyz;
  Output outpL           = Compute(inp, MatMVPL);
  Output outpR           = Compute(inp, MatMVPR);
  gl_Position            = outpL.pos0;
  gl_SecondaryPositionNV = outpR.pos0;
  frg_uv0                = outpL.uv0;
  EmitVertex();
  gl_Position            = outpL.pos1;
  gl_SecondaryPositionNV = outpR.pos1;
  frg_uv0                = outpL.uv1;
  EmitVertex();
  gl_Position            = outpL.pos3;
  gl_SecondaryPositionNV = outpR.pos3;
  frg_uv0                = outpL.uv3;
  EmitVertex();
  gl_Position            = outpL.pos2;
  gl_SecondaryPositionNV = outpR.pos2;
  frg_uv0                = outpL.uv2;
  EmitVertex();
  EndPrimitive();
}
///////////////////////////////////////////////////////////////
vertex_interface vface_streak : uset_vtx {
  inputs {
    vec4 position : POSITION;
    vec3 normal : NORMAL;
    vec3 velocity : BINORMAL;
    vec2 lw : TEXCOORD0; // length and width
    vec2 ra : TEXCOORD1; // random and age
  }
  outputs {
    vec3 geo_cnrm; // NOT an array
    vec3 geo_vel; // NOT an array
    vec2 geo_lw; // NOT an array
    vec2 geo_ra; // NOT an array
  }
}
///////////////////////////////////////////////////////////////
vertex_interface vface_streak_stereo {
  inputs {
    vec4 position : POSITION;
    vec3 normal : NORMAL;
    vec3 velocity : BINORMAL;
    vec2 lw : TEXCOORD0; // length and width
    vec2 ra : TEXCOORD1; // random and age
  }
  outputs {
    vec3 geo_pos; // NOT an array
    vec3 geo_cnrm; // NOT an array
    vec3 geo_vel; // NOT an array
    vec2 geo_lw; // NOT an array
    vec2 geo_ra; // NOT an array
    //layout(secondary_view_offset = 1) int gl_Layer;
  }
}
///////////////////////////////////////////////////////////////
vertex_shader vs_streak : vface_streak {
  gl_Position = position;
  geo_cnrm = normal;
  geo_vel  = velocity;
  geo_lw   = lw;
  geo_ra = ra;
}
///////////////////////////////////////////////////////////////
vertex_shader vs_streak_stereo //
  : extension(GL_NV_stereo_view_rendering) //
  : extension(GL_NV_viewport_array2) //
  : vface_streak_stereo {
  geo_pos = position.xyz;
  geo_cnrm = normal;
  geo_vel  = velocity;
  geo_lw   = lw;
  geo_ra = ra;
}
///////////////////////////////////////////////////////////////
geometry_interface gface_streak //
  : gface_base { //

  // inputs passed from vertex shader

  inputs {
    vec3 geo_cnrm[];
    vec3 geo_vel[];
    vec2 geo_lw[];
    vec2 geo_ra[];
  }

  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec2 frg_uv1;
  }
}
///////////////////////////////////////////////////////////////
geometry_interface gface_streak_stereo //
 : gface_base { //
 
  inputs {
    vec3 geo_pos[];
    vec3 geo_cnrm[];
    vec3 geo_vel[];
    vec2 geo_lw[];
    vec2 geo_ra[];
  }
  // TODO recursive walk up inheritance tree for attribute out->in inheritance
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec2 frg_uv1;
    //layout(secondary_view_offset = 1) int gl_Layer;
    int gl_ViewportMask[];
    int gl_SecondaryViewportMaskNV[];
  }
}
///////////////////////////////////////////////////////////////
libblock lib_streak_types {
  struct StreakInput {
    vec3 pos;
    vec3 vel;
    vec3 cnrm;
    vec2 lw;
  };
  struct StreakOutput {
    vec4 pos0;
    vec4 pos1;
    vec4 pos2;
    vec4 pos3;
  };
}
///////////////////////////////////////////////////////////////
libblock lib_streak //
  : lib_streak_types {
  ///////////////////////////////////////////
  StreakOutput computeStreak(mat4 mvp) {
    StreakOutput outp;
    vec3 vel  = geo_vel[0].xyz;
    vec3 cnrm = geo_cnrm[0].xyz;
    float wid = geo_lw[0].y;
    float len = geo_lw[0].x;

    vec3 pos = gl_in[0].gl_Position.xyz;

    vec3 lpos = pos - vel * len;
    vec3 crs  = wid * normalize(cross(vel, cnrm));

    vec3 p0 = pos + crs;
    vec3 p1 = pos - crs;
    vec3 p2 = lpos - crs;
    vec3 p3 = lpos + crs;

    outp.pos0 = mvp * vec4(p0, 1.0);
    outp.pos1 = mvp * vec4(p1, 1.0);
    outp.pos2 = mvp * vec4(p2, 1.0);
    outp.pos3 = mvp * vec4(p3, 1.0);

    return outp;
  }
}
///////////////////////////////////////////////////////////////
libblock lib_streak_stereo //
 : lib_streak_types { //
  StreakOutput computeStreakStereo(StreakInput inp) {

    vec3 pos =  inp.pos.xyz;
    vec3 vel  = inp.vel.xyz;
    vec3 cnrm = inp.cnrm.xyz;
    float wid = inp.lw.y;
    float len = inp.lw.x;

    vec3 lpos = pos - (vel * len);
    vec3 crs = normalize(cross(vel, cnrm)) * wid;

    vec3 p0 = pos + crs;
    vec3 p1 = pos - crs;
    vec3 p2 = lpos - crs;
    vec3 p3 = lpos + crs;

    StreakOutput outp;
    outp.pos0 = vec4(p0, 1.0);
    outp.pos1 = vec4(p1, 1.0);
    outp.pos2 = vec4(p2, 1.0);
    outp.pos3 = vec4(p3, 1.0);

    return outp;
  }
}
///////////////////////////////////////////////////////////////
geometry_shader gs_streak //
  : gface_streak //
  : lib_streak
  : uset_vtx { //
  StreakOutput outp = computeStreak(MatMVP);
  gl_Position       = outp.pos0;
  frg_uv1     = geo_ra[0];
  frg_clr     = vec4(0,0,0,0);
  frg_uv0     = vec2(0,0);
  EmitVertex();
  gl_Position = outp.pos1;
  frg_uv0     = vec2(1,0);
  EmitVertex();
  gl_Position = outp.pos3;
  frg_uv0     = vec2(0,1);
  EmitVertex();
  gl_Position = outp.pos2;
  frg_uv0     = vec2(1,1);
  EmitVertex();
  //EndPrimitive();
}
///////////////////////////////////////////////////////////////
geometry_shader gs_streak_stereo //
  : gface_streak_stereo //
  : lib_streak_stereo //
  : uset_geo_stereo //
  : extension(GL_NV_stereo_view_rendering) //
  : extension(GL_NV_viewport_array2) { //

  StreakInput inp;
  inp.pos  = geo_pos[0].xyz;
  inp.vel  = geo_vel[0].xyz;
  inp.cnrm = geo_cnrm[0].xyz;
  inp.lw   = geo_lw[0].xy;

  frg_uv1     = geo_ra[0];
  frg_clr                       = vec4(0,0,0,0);

  //gl_Layer = 0;
  gl_ViewportMask[0] = 1;
  gl_SecondaryViewportMaskNV[0] = 2;

  StreakOutput outp             = computeStreakStereo(inp); // MatMVPL

  gl_Position                   = MatMVPL*outp.pos0;
  gl_SecondaryPositionNV        = MatMVPR*outp.pos0;
  frg_uv0                       = vec2(0,0);
  EmitVertex();
  gl_Position                   = MatMVPL*outp.pos1;
  gl_SecondaryPositionNV        = MatMVPR*outp.pos1;
  frg_uv0                       = vec2(1,0);
  EmitVertex();
  gl_Position                   = MatMVPL*outp.pos3;
  gl_SecondaryPositionNV        = MatMVPR*outp.pos3;
  frg_uv0                       = vec2(0,1);
  EmitVertex();
  gl_Position                   = MatMVPL*outp.pos2;
  gl_SecondaryPositionNV        = MatMVPR*outp.pos2;
  frg_uv0                       = vec2(1,1);
  EmitVertex();

  EndPrimitive();
}
///////////////////////////////////////////////////////////////
// streak compute shaders
///////////////////////////////////////////////////////////////
libblock typelib_compute_streaks {
  pragma_typelib;
  struct InputVertex{
    vec3 pos;
    vec3 vel;
    vec2 age_rand;
  };
  struct OutputVertex{
    vec4 hposL;
    vec4 hposR;
    vec2 uv;
  };
}
uniform_set compute_unis {
    //layout (binding = 1, r32ui) uimage2D img_depthclusters;
    vec3 xxx;
}
compute_interface iface_compute
    : typelib_compute_streaks
    : compute_unis {
    inputs {
        layout(local_size_x = 1, local_size_y = 1, local_size_z = 1);
    }
    storage {
        layout(std430, binding = 0) buffer {
            mat4         mvp_L;             // 0
            mat4         mvp_R;             // 64
            uint32_t     num_vertices;      // 128
            vec3         obj_nrmz;          // 132
            vec2         LW;                // 144
            InputVertex  inp_vertex[16384]; // 152
            OutputVertex out_vertex[65536]; // 152 + 16384*24
            // total size = 152 + 16384*24 + 65536*40 = 3014808
        } ssbo_compute;
    }
}
compute_shader compute_streaks
    : extension(GL_NV_gpu_shader5)
    : iface_compute {
    vec3 SUM;
    for( int i=0; i<num_vertices; i++ ){
      vec4 inp_pos = vec4(inp_vertex[i].pos, 1.0);
      vec4 hposl = mvp_L * inp_pos;
      vec4 hposr = mvp_R * inp_pos;
      out_vertex[i].hposL = hposl;
      out_vertex[i].hposR = hposr;
    }
    obj_nrmz = normalize(SUM);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_modclr : fface_psys {
  out_clr        = modcolor;
  out_rufmtl     = vec4(0, 1, 0, 0);
  out_normal_mdl = vec4(0, 0, 0, 5.0);
}
fragment_shader ps_fragclr : fface_minimal {
  out_clr        = frg_clr;
  out_rufmtl     = vec4(0, 1, 0, 0);
  out_normal_mdl = vec4(0, 0, 0, 5.0);
}
fragment_shader ps_modtex : fface_psys {
  vec4 texc      = texture(ColorMap, frg_uv0.xy);
  out_clr        = texc * modcolor;
  out_rufmtl     = vec4(0, 1, 0, 0);
  out_normal_mdl = vec4(0, 0, 0, 5.0);
  if (out_clr.a == 0.0f)
    discard;
}
fragment_shader ps_flat : fface_psys {
  float unit_age = frg_uv1.x;
  vec3 C  = modcolor.xyz*(1.0-unit_age);
  out_clr = vec4(C, modcolor.w);
}
fragment_shader ps_flat_stereo 
  : fface_psys_stereo {
  float unit_age = frg_uv1.x;
  vec3 C  = modcolor.xyz*(1.0-unit_age);
  out_clr = vec4(C, modcolor.w);
}
fragment_shader ps_grad : fface_psys {
  float unit_age = frg_uv1.x;
  vec4 gmap = texture(GradientMap, vec2(unit_age, 0.0));
  vec4 cmap = texture(ColorMap, frg_uv0.xy);
  out_clr.xyz = gmap.xyz*cmap.xyz;
  out_clr.w = gmap.w*cmap.w;
}
fragment_shader ps_modtexclr : fface_psys {

  //float alp      = out_clr.r * User0.r + out_clr.g * User0.g + out_clr.b * User0.b + out_clr.a * User0.a;
  vec4 texc      = texture(ColorMap, frg_uv0.xy);
  float alp      = frg_clr.a*texc.a;
  if (alp == 0.0)
    discard;
  float unit_age = frg_uv1.x;
  out_rufmtl     = vec4(0, 1, 0, 0);
  out_normal_mdl = vec4(0, 0, 5, 0);
  out_clr        = texc*modcolor*(1.0-unit_age); // *  * frg_clr;
  out_clr.a      = alp;
}
fragment_shader ps_volume : fface_psys {
  vec2 uv        = frg_uv0.xy;
  float w        = frg_uv1.x;
  vec3 uvw       = vec3(uv, w);
  vec4 TexInp0   = texture(VolumeMap, uvw).xyzw;
  out_clr        = TexInp0.bgra * modcolor * frg_clr.bgra;
  out_rufmtl     = vec4(0, 1, 0, 0);
  out_normal_mdl = vec4(0, 0, 0, 5.0);
}
///////////////////////////////////////////////////////////////
technique tparticle_nogs {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxtexcolornogs;
    fragment_shader = ps_flat;
    state_block     = sb_default;
  }
}
technique tflatparticle_sprites {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxtexcolor;
    geometry_shader = gs_billboardquad;
    fragment_shader = ps_flat;
    state_block     = sb_default;
  }
}
technique tflatparticle_streaks {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_streak;
    geometry_shader = gs_streak;
    fragment_shader = ps_flat;
    state_block     = sb_default;
  }
}
technique tflatparticle_streaks_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_streak_stereo;
    geometry_shader = gs_streak_stereo;
    fragment_shader = ps_flat_stereo;
    state_block     = sb_default;
  }
}
technique tgradparticle_sprites {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxtexcolor;
    geometry_shader = gs_billboardquad;
    fragment_shader = ps_flat;
    state_block     = sb_default;
  }
}
technique tgradparticle_streaks {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_streak;
    geometry_shader = gs_streak;
    fragment_shader = ps_grad;
    state_block     = sb_default;
  }
}
technique ttexparticle_sprites {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxtexcolor;
    geometry_shader = gs_billboardquad;
    fragment_shader = ps_modtexclr;
    state_block     = sb_default;
  }
}
technique ttexparticle_streaks {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_streak;
    geometry_shader = gs_streak;
    fragment_shader = ps_modtexclr;
    state_block     = sb_default;
  }
}
technique tbasicparticle_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxtexcolor;
    geometry_shader = gs_billboardquad_stereo;
    fragment_shader = ps_modtexclr;
    state_block     = sb_default;
  }
}
technique tstreakparticle {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_streak;
    geometry_shader = gs_streak;
    fragment_shader = ps_modtexclr;
    state_block     = sb_default;
  }
}
technique tstreakparticle_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_streak;
    geometry_shader = gs_streak_stereo;
    fragment_shader = ps_modtexclr;
    state_block     = sb_default;
  }
}
///////////////////////////////////////////////////////////////
technique tbasicparticle_pick {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    geometry_shader = gs_billboardquad;
    fragment_shader = ps_modtex;
    state_block     = sb_default;
  }
}
technique tvolnoiseparticle {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    geometry_shader = gs_billboardquad;
    fragment_shader = ps_modtex;
    state_block     = sb_default;
  }
}
technique tvolumeparticle {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    geometry_shader = gs_billboardquad;
    fragment_shader = ps_volume;
    state_block     = sb_alpadd;
  }
}
///////////////////////////////////////////////////////////////
