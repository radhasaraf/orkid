///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default
{
	glsl_version = "330";
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
vertex_interface vface_base
{
	uniform mat4        MatM;
	uniform mat4        MatV;
	uniform mat4        MatP;
	uniform mat4        MatMV;
	uniform mat4        MatMVP;
	uniform mat4        MatAux;
	uniform vec4		modcolor;
	uniform vec4        User0;
	uniform vec4        User1;
	uniform vec4        User2;
	uniform vec4        User3;
	uniform float		Time;
	uniform vec4		NoiseShift;
	uniform vec4		NoiseFreq;
	uniform vec4		NoiseAmp;
}
vertex_interface iface_vdefault : vface_base
{
	//
	in vec4 position : POSITION;
	in vec4 vtxcolor : COLOR0;
	in vec4 uv0 : TEXCOORD0;
	in vec4 uv1 : TEXCOORD1;
	//
	out vec4 geo_clr;
	out vec4 geo_uv0;
	out vec4 geo_uv1;
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fdefault
{
	in vec4 frg_clr;
	in vec4 frg_uv0;
	in vec4 frg_uv1;
	//
	out vec4 out_clr;
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fmt
{
	uniform vec4 modcolor;
	uniform sampler2D ColorMap;
	uniform sampler3D VolumeMap;
	//
	out vec4 out_clr;
	//
	in vec4 frg_clr;
	in vec4 frg_uv0;
	in vec4 frg_uv1;
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default
{
	inherits default;
	//DepthTest=LEQUALS;
	//DepthMask=true;
	//CullTest=PASS_FRONT;
}
///////////////////////////////////////////////////////////////
state_block sb_lerpblend
{
	inherits sb_default;
	BlendMode = ADDITIVE;
}
///////////////////////////////////////////////////////////////
state_block sb_additive
{
	inherits sb_default;
	BlendMode = ADDITIVE;
}
///////////////////////////////////////////////////////////////
state_block sb_alpadd
{
	inherits sb_default;
	BlendMode = ALPHA_ADDITIVE;
}
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
vertex_shader vs_vtxtexcolor : iface_vdefault
{
	gl_Position = position;
	geo_clr = vtxcolor.bgra;
	geo_uv0 = uv0;
	geo_uv1 = uv1;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_modtex : iface_fmt
{
	vec4 texc = texture( ColorMap, frg_uv0.xy );
	out_clr = texc*modcolor;
	if( out_clr.a==0.0f ) discard;
}
fragment_shader ps_modtexclr : iface_fmt
{
	vec4 texc = texture( ColorMap, frg_uv0.xy );
	out_clr = texc*modcolor*frg_clr;
	if( out_clr.a==0.0f ) discard;
}
///////////////////////////////////////////////////////////////
vertex_shader vs_vtxcolor : iface_vdefault
{
	gl_Position = position;
	geo_clr = vtxcolor;
	geo_uv0 = uv0;
	geo_uv1 = uv1;
}
///////////////////////////////////////////////////////////////
geometry_interface iface_gdefault
{
	layout (points) in;
	layout (triangle_strip, max_vertices=6) out; 
	//
	uniform mat4 MatP;	
	uniform mat4 MatV;	
	uniform mat4 MatMVP;	
	uniform vec4 User0;
	uniform vec4 User1;
	uniform vec4 User2;
	//
	in vec4 geo_clr[1];
	in vec4 geo_uv0[1];
	in vec4 geo_uv1[1];
	//
	out vec4 frg_clr;
	out vec4 frg_uv0;
	out vec4 frg_uv1;
}
geometry_shader gs_identity : iface_gdefault
{
	for( int n=0; n<gl_in.length(); n++ )
	{
		gl_Position = gl_in[n].gl_Position;
		frg_clr = geo_clr[n];
		frg_uv0 = geo_uv0[n];
		frg_uv1 = geo_uv1[n];
		EmitVertex();
	}
	EndPrimitive();
}
geometry_shader gs_billboardquad : iface_gdefault
{
	frg_clr = geo_clr[0];
	frg_uv1 = geo_uv1[0];

	float ftexanimdim = User2.x;
	int texanimdim = int(ftexanimdim);
	int texcnt = int(User2.y);

    bool is_texanim = texanimdim>1;

	float ang = geo_uv0[0].x;
	float siz = geo_uv0[0].y;

	vec3 nxny = User0.xyz;
	vec3 nxpy = User1.xyz;

	float sinfr = sin(ang)*siz;
	float cosfr = cos(ang)*siz;
	vec3 rota = (nxny*cosfr)+(nxpy*sinfr);
	vec3 rotb = (nxpy*cosfr)-(nxny*sinfr);

	vec3 ctr = gl_in[0].gl_Position.xyz;
	vec3 p0 = ctr+rota;
	vec3 p1 = ctr+rotb;
	vec3 p2 = ctr-rota;
	vec3 p3 = ctr-rotb;

	vec4 pos0 = MatMVP * vec4(p0,1.0);
	vec4 pos1 = MatMVP * vec4(p1,1.0);
	vec4 pos2 = MatMVP * vec4(p2,1.0);
	vec4 pos3 = MatMVP * vec4(p3,1.0);

	vec4 uv0 = vec4(0.0,0.0,0.0,0.0);
	vec4 uv1 = vec4(1.0,0.0,0.0,0.0);
	vec4 uv2 = vec4(1.0,1.0,0.0,0.0);
	vec4 uv3 = vec4(0.0,1.0,0.0,0.0);

	if( is_texanim )
	{
		float ftexframe = frg_uv1.x;
		int itexframe = int(ftexframe)%texcnt;
		int ifrX = itexframe%texanimdim;
		int ifrY = itexframe/texanimdim;
		float ftexs = 1.0f/ftexanimdim;
		float fu0 = float(ifrX)*ftexs;
		float fu1 = float(ifrX+1)*ftexs;
		float fv0 = float(ifrY)*ftexs;
		float fv1 = float(ifrY+1)*ftexs;
		uv0 = vec4( fu0, fv0, 0.0, 0.0 );
		uv1 = vec4( fu1, fv0, 0.0, 0.0 );
		uv2 = vec4( fu1, fv1, 0.0, 0.0 );
		uv3 = vec4( fu0, fv1, 0.0, 0.0 );						
	}

	gl_Position = pos0;
	frg_uv0 = uv0;
	EmitVertex();
	gl_Position = pos1;
	frg_uv0 = uv1;
	EmitVertex();
	gl_Position = pos2;
	frg_uv0 = uv2;
	EmitVertex();
	gl_Position = pos0;
	frg_uv0 = uv0;
	EmitVertex();
	gl_Position = pos2;
	frg_uv0 = uv2;
	EmitVertex();
	gl_Position = pos3;
	frg_uv0 = uv3;
	EmitVertex();

	EndPrimitive();
}
///////////////////////////////////////////////////////////////
vertex_interface vface_streak : vface_base
{
	//
	in vec4 position : POSITION;
	in vec4 normal : NORMAL;
	in vec4 binormal : BINORMAL;
	in vec4 vtxcolor : COLOR0;
	//
	//out vec4 geo_pos;
	out vec4 geo_lpos;
	out vec4 geo_vel;
	out vec4 geo_clr;
}
vertex_shader vs_streak : vface_streak
{
	gl_Position = position;
	geo_clr = vtxcolor.bgra;
	geo_lpos = normal;
	geo_vel = binormal;
}
geometry_interface gface_streak
{
	layout (points) in;
	layout (triangle_strip, max_vertices=6) out; 
	//
	uniform mat4 MatP;	
	uniform mat4 MatV;	
	uniform mat4 MatMVP;	
	uniform vec4 User0;
	uniform vec4 User1;
	uniform vec4 User2;
	//
	in vec4 geo_clr[1];
	in vec4 geo_lpos[1];
	in vec4 geo_vel[1];
	//
	out vec4 frg_clr;
	out vec4 frg_uv0;
}
geometry_shader gs_streak : gface_streak
{
	frg_clr = geo_clr[0];
	vec3 vel = geo_vel[0].xyz;
	vec3 lpos = geo_lpos[0].xyz;

	vec3 ctr = gl_in[0].gl_Position.xyz;
	vec3 p0 = ctr+vel;
	vec3 p1 = ctr-vel;
	vec3 p2 = lpos-vel;
	vec3 p3 = lpos+vel;

	vec4 pos0 = MatMVP * vec4(p0,1.0);
	vec4 pos1 = MatMVP * vec4(p1,1.0);
	vec4 pos2 = MatMVP * vec4(p2,1.0);
	vec4 pos3 = MatMVP * vec4(p3,1.0);

	vec4 uv0 = vec4(0.0,0.0,0.0,0.0);
	vec4 uv1 = vec4(1.0,0.0,0.0,0.0);
	vec4 uv2 = vec4(1.0,1.0,0.0,0.0);
	vec4 uv3 = vec4(0.0,1.0,0.0,0.0);

	gl_Position = pos0;
	frg_uv0 = uv0;
	EmitVertex();
	gl_Position = pos1;
	frg_uv0 = uv1;
	EmitVertex();
	gl_Position = pos2;
	frg_uv0 = uv2;
	EmitVertex();
	gl_Position = pos0;
	frg_uv0 = uv0;
	EmitVertex();
	gl_Position = pos2;
	frg_uv0 = uv2;
	EmitVertex();
	gl_Position = pos3;
	frg_uv0 = uv3;
	EmitVertex();

	EndPrimitive();

}
///////////////////////////////////////////////////////////////
fragment_shader ps_fragclr : iface_fdefault
{
	out_clr = frg_clr;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_modclr : iface_fmt
{
	out_clr = modcolor;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_volume : iface_fmt
{
	vec2 uv = frg_uv0.xy;
	float w = frg_uv1.x;
	vec3 uvw = vec3(uv,w);
    vec4 TexInp0 = texture( VolumeMap, uvw ).xyzw;
	out_clr = TexInp0.bgra*modcolor*frg_clr.bgra;
}
///////////////////////////////////////////////////////////////
technique tbasicparticle
{	fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_vtxtexcolor;
		geometry_shader=gs_billboardquad;
		fragment_shader=ps_modtexclr;
		state_block=sb_default;
	}
}
technique tstreakparticle
{	fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_streak;
		geometry_shader=gs_streak;
		fragment_shader=ps_modtexclr;
		state_block=sb_default;
	}
}
technique tbasicparticle_pick
{	fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_vtxcolor;
		geometry_shader=gs_billboardquad;
		fragment_shader=ps_modtex;
		state_block=sb_default;
	}
}
technique tvolnoiseparticle
{	fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_vtxcolor;
		geometry_shader=gs_billboardquad;
		fragment_shader=ps_modtex;
		state_block=sb_default;
	}
}
technique tvolumeparticle
{	fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_vtxcolor;
		geometry_shader=gs_billboardquad;
		fragment_shader=ps_volume;
		state_block=sb_alpadd;
	}
}
///////////////////////////////////////////////////////////////
