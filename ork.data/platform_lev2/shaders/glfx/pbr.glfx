///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
	glsl_version = "130";
	import "skintools.i";
	import "picktools.i";
	import "gbuftools.i";
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
uniform_set ub_vtx {
	mat4 mv;
	mat4 mvp;
	mat4 mvp_l;
	mat4 mvp_r;
	mat3 mrot;
	vec4 modcolor;
	vec2 InvViewportSize; // inverse target size
}
///////////////////////////////////////////////////////////////
uniform_set ub_frg {
  sampler2D ColorMap;
  sampler2D NormalMap;
  sampler2D MtlRufMap;
	vec4 ModColor;
	vec2 InvViewportSize; // inverse target size
	float MetallicFactor;
	float RoughnessFactor;
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default : default {
}
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
vertex_interface iface_vgbuffer
	: ub_vtx {
  inputs {
    vec4 position : POSITION;
    vec3 normal : NORMAL;
    vec3 binormal : BINORMAL;
    vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
	}
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    mat3 frg_tbn;
		float frg_camdist;
		vec3 frg_camz;
	}
}
///////////////////////////////////////////////////////////////
vertex_interface iface_vgbuffer_skinned
	: iface_vgbuffer
	: iface_skintools {
}
///////////////////////////////////////////////////////////////
vertex_interface iface_vgbuffer_stereo : iface_vgbuffer {
  outputs {
    layout(secondary_view_offset=1) int gl_Layer;
  }
}
///////////////////////////////////////////////////////////////
libblock lib_pbr_vtx {
	void vs_common(vec4 pos, vec3 nrm, vec3 bin) {
		vec4 cpos  = mv * pos;
    vec3 wnormal = normalize(mrot*normal);
    vec3 wbitangent = normalize(mrot*binormal); // technically binormal is a bitangent
		vec3 wtangent = cross(wbitangent,wnormal);
		//frg_clr = vtxcolor;
		frg_clr = vec4(1,1,1,1); //TODO - split vs_rigid_gbuffer into vertexcolor vs identity
		frg_uv0 = uv0*vec2(1,-1);
		frg_tbn = mat3(
        wtangent,
        wbitangent,
				wnormal
    );
		frg_camz = wnormal.xyz;
		frg_camdist = -cpos.z;
	}
}
///////////////////////////////////////////////////////////////
vertex_shader vs_rigid_gbuffer
	: iface_vgbuffer
  : lib_pbr_vtx {
		vs_common(position,normal,binormal);
		gl_Position = mvp*position;
}
///////////////////////////////////////////////////////////////
vertex_shader vs_rigid_gbuffer_stereo
	: extension(GL_NV_stereo_view_rendering)
  : extension(GL_NV_viewport_array2)
	: iface_vgbuffer_stereo  : lib_pbr_vtx {
		vs_common(position,normal,binormal);
		gl_Position = mvp_l*position;
		gl_SecondaryPositionNV = mvp_r*position;
  	gl_Layer = 0;
		gl_ViewportMask[0] = 1;
  	gl_SecondaryViewportMaskNV[0] = 2;
}
///////////////////////////////////////////////////////////////
vertex_shader vs_skinned_gbuffer
	: iface_vgbuffer_skinned
  : skin_tools
  : lib_pbr_vtx {
  vec4 skn_pos = vec4(SkinPosition(position.xyz),1);
	vec3 skn_nrm  = SkinNormal(normal);
	vec3 skn_bit  = SkinNormal(binormal); // // technically binormal is a bitangent
	vs_common(skn_pos,skn_nrm,skn_bit);
	gl_Position = mvp*skn_pos;
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fgbuffer
	: ub_frg {
  inputs {
    vec4 frg_clr;
  	vec2 frg_uv0;
  	mat3 frg_tbn;
		float frg_camdist;
		vec3 frg_camz;
	}
	outputs {
		layout(location = 0) uvec4 out_gbuf;
	}
}
///////////////////////////////////////////////////////////////
libblock lib_pbr_frg : lib_gbuf_encode {
	void ps_common_n(vec3 N,vec2 UV,bool emissive) {
		vec3 normal = normalize(frg_tbn*N);
		vec3 rufmtlamb = texture(MtlRufMap,UV).zyx;
		float mtl = rufmtlamb.x * MetallicFactor;
		float ruf = rufmtlamb.y * RoughnessFactor;
		vec3 color = (ModColor*frg_clr*texture(ColorMap,UV)).xyz;
		out_gbuf = packGbuffer(color,normal,ruf,mtl,emissive);
	}
}
///////////////////////////////////////////////////////////////
fragment_shader ps_gbuffer
	: iface_fgbuffer
  : lib_pbr_frg {
	ps_common_n(vec3(0,0,1),frg_uv0);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_gbuffer_n // normalmap
	: iface_fgbuffer
  : lib_pbr_frg {
		vec3 TN = texture(NormalMap,frg_uv0).xyz;
		TN = mix(TN,vec3(0.5,1,0.5),0.0);
		bool emissive = length(TN)<0.1;
		vec3 N = normalize(TN*2.0-vec3(1,1,1));
	ps_common_n(N,frg_uv0,emissive);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_gbuffer_n_stereo // normalmap
	: iface_fgbuffer
  : lib_pbr_frg {
		vec3 TN = texture(NormalMap,frg_uv0).xyz;
		bool emissive = length(TN)<0.1;
		vec3 N = normalize(TN*2.0-vec3(1,1,1));
		if( length(TN)<0.1 ) N = vec3(0,0,0);
	ps_common_n(N,frg_uv0,emissive);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_gbuffer_n_tex_stereo // normalmap (stereo texture - vsplit)
	: iface_fgbuffer
  : lib_pbr_frg {
		vec2 screen_uv   = gl_FragCoord.xy * InvViewportSize;
		bool is_right = bool(screen_uv.x <= 0.5);
		vec2 map_uv = frg_uv0*vec2(1,0.5);
		if( is_right )
			map_uv += vec2(0,0.5);
		vec3 TN = texture(NormalMap,map_uv).xyz;
  	vec3 N = TN*2.0-vec3(1,1,1);
		bool emissive = length(TN)<0.1;
		ps_common_n(N,map_uv,emissive);
}
///////////////////////////////////////////////////////////////
technique rigid_gbuffer {
	fxconfig=fxcfg_default;
	pass p0 {
    vertex_shader=vs_rigid_gbuffer;
		fragment_shader=ps_gbuffer;
		state_block=sb_default;
	}
}
technique rigid_gbuffer_n {
	fxconfig=fxcfg_default;
	pass p0 {
    vertex_shader=vs_rigid_gbuffer;
		fragment_shader=ps_gbuffer_n;
		state_block=sb_default;
	}
}
technique skinned_gbuffer_n {
	fxconfig=fxcfg_default;
	pass p0 {
    vertex_shader=vs_skinned_gbuffer;
		fragment_shader=ps_gbuffer_n;
		state_block=sb_default;
	}
}
technique rigid_gbuffer_n_stereo {
	fxconfig=fxcfg_default;
	pass p0 {
    vertex_shader=vs_rigid_gbuffer_stereo;
		fragment_shader=ps_gbuffer_n_stereo;
		state_block=sb_default;
	}
}
technique rigid_gbuffer_n_tex_stereo {
	fxconfig=fxcfg_default;
	pass p0 {
    vertex_shader=vs_rigid_gbuffer_stereo;
		fragment_shader=ps_gbuffer_n_tex_stereo;
		state_block=sb_default;
	}
}

///////////////////////////////////////////////////////////////
