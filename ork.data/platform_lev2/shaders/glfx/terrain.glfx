///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default
{
	glsl_version = "330";
	import "misctools.i";
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
uniform_block ublock_vtx
{
	uniform mat4        MatMVP;
    uniform mat4        MatMV;
	uniform mat4        MatM;
	uniform mat4        MatV;
	uniform mat4        MatP;
	uniform mat4        MatAux;
	uniform vec4        modcolor;
	uniform float       Time;
	uniform sampler2D ColorMap2; // technically a heightmap
	uniform vec4        User0; // aabbmin
	uniform vec4        User1; // aabbmax
	uniform vec4        User2; // aabbmax-aabmin
}
uniform_block ublock_frg
{
	uniform vec4 modcolor;
	uniform sampler2D ColorMap;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_vdefault
	: ublock_vtx
{
	//
	in vec4 position : POSITION;
	in vec4 vtxcolor : COLOR0;
	in vec2 uv0 : TEXCOORD0;
	//
	out vec4 frg_clr;
	out vec2 frg_uv;
}
fragment_interface iface_fdefault
	: ublock_frg
{
	in vec4 frg_clr;
	in vec2 frg_uv;
	//
	out vec4 out_clr;
}
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
vertex_shader vs_terrain1
	: iface_vdefault
	: misc_tools
{
		float SCALE = 0.3;

		////////////////////////////////////////////

    vec3 inpos = position.xyz;
		vec3 normal = vec3(0.0, 1.0, 0.0);
		float delta = 0.0001;
		vec3 dA = delta * normalize(cross(normal.yzx, normal));
		vec3 dB = delta * normalize(cross(dA, normal));
		vec3 p0 = inpos;
		vec3 pA = inpos + dA;
		vec3 pB = inpos + dB;

		////////////////////////////////////////////
		// p0
		////////////////////////////////////////////

		float inU0 = (p0.x-User0.x)/User2.x;
		float inV0 = (p0.z-User0.z)/User2.z;
		vec2 uvc0 = vec2(inU0,inV0);
		vec2 texuv10 = vec2(inU0,inV0);
		vec2 texuv20 = vec2(inV0,inU0);
		texuv10 = (texuv10*SCALE)+vec2(0,Time*0.01);
		texuv20 = (texuv20*SCALE*0.7)+vec2(0,Time*0.007);
		vec4 texc10 = texture( ColorMap2, texuv10  );
		vec4 texc20 = texture( ColorMap2, texuv20  );
		p0.y = (texc10.r+texc20.r)*500.0;
		p0.x *= SCALE;
		p0.z *= SCALE;

		////////////////////////////////////////////
		// pA
		////////////////////////////////////////////

		float inUA = (pA.x-User0.x)/User2.x;
		float inVA = (pA.z-User0.z)/User2.z;
		vec2 uvcA = vec2(inUA,inVA);
		vec2 texuv1A = vec2(inUA,inVA);
		vec2 texuv2A = vec2(inVA,inUA);
		texuv1A = (texuv1A*SCALE)+vec2(0,Time*0.01);
		texuv2A = (texuv2A*SCALE*0.7)+vec2(0,Time*0.007);
		vec4 texc1A = texture( ColorMap2, texuv1A  );
		vec4 texc2A = texture( ColorMap2, texuv2A  );
		pA.y = (texc1A.r+texc2A.r)*500.0;
		pA.x *= SCALE;
		pA.z *= SCALE;

		////////////////////////////////////////////
		// p0
		////////////////////////////////////////////

		float inUB = (pB.x-User0.x)/User2.x;
		float inVB = (pB.z-User0.z)/User2.z;
		vec2 uvcB = vec2(inUB,inVB);
		vec2 texuv1B = vec2(inUB,inVB);
		vec2 texuv2B = vec2(inVB,inUB);
		texuv1B = (texuv1B*SCALE)+vec2(0,Time*0.01);
		texuv2B = (texuv2B*SCALE*0.7)+vec2(0,Time*0.007);
		vec4 texc1B = texture( ColorMap2, texuv1B );
		vec4 texc2B = texture( ColorMap2, texuv2B  );
		pB.y = (texc1B.r+texc2B.r)*500.0;
		pB.x *= SCALE;
		pB.z *= SCALE;

		////////////////////////////////////////////////////

		vec3 p00 = p0 + normal * p0.y;
		pA += normal * pA.y;
		pB += normal * pB.y;
		vec3 N = normalize(cross(pB - p00, pA - p00));

		//////////////////////////////////////////////////////

		gl_Position = MatMVP*vec4(p0,1);
	  frg_clr = vec4(mod(p0.x,1),mod(p0.z,1),0,1);
	  frg_uv = uv0;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_terrain1 : iface_fdefault
{
	out_clr = modcolor*frg_clr;
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default
{
	inherits default;
}
///////////////////////////////////////////////////////////////
technique terrain1 {
	fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_terrain1;
		fragment_shader=ps_terrain1;
		state_block=sb_default;
	}
}
