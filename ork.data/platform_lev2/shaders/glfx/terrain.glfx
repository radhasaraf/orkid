///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
  glsl_version = "330";
  import "misctools.i";
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
uniform_block ublock_vtx {
  uniform mat4 MatMVP;
  uniform mat4 MatMV;
  uniform mat4 MatM;
  uniform mat4 MatV;
  uniform mat4 MatP;
  uniform mat4 MatAux;
  uniform vec4 modcolor;
  uniform float Time;
  uniform sampler2D ColorMap2; // technically a heightmap
  uniform sampler2D ColorMap3; // technically a heightmap
  uniform vec4 User0;          // aabbmin
  uniform vec4 User1;          // aabbmax
  uniform vec4 User2;          // aabbmax-aabmin
  uniform mat3 MatRotW;
}
uniform_block ublock_frg {
  uniform vec4 modcolor;
  uniform sampler2D ColorMap;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_vdefault : ublock_vtx {
  //
  in vec4 position : POSITION;
  in vec4 vtxcolor : COLOR0;
  in vec2 uv0 : TEXCOORD0;
  //
  out vec3 frg_nrm;
  out vec2 frg_uvxp;
  out vec2 frg_uvyp;
  out vec2 frg_uvzp;
  out vec3 frg_wpos;
  out float frg_camdist;
}
fragment_interface iface_fdefault : ublock_frg {
  in vec3 frg_nrm;
  in vec2 frg_uvxp;
  in vec2 frg_uvyp;
  in vec2 frg_uvzp;
  in vec3 frg_wpos;
  in float frg_camdist;
  //
  layout(location = 0) out vec4 out_clr;
}
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
vertex_shader vs_terrain1
  : iface_vdefault
  : lib_terrain {
  vec3 campos = inverse(MatMV)[3].xyz;
  TerOut tero = computeTerrain(campos);
  ///////////////////////////
  // apply to GL
  ///////////////////////////
  gl_Position = MatMVP * vec4(tero.wpos, 1);
  frg_nrm = tero.wnrm;
  frg_camdist = distance(tero.wpos, campos);
  frg_uvxp = tero.uvxplane;
  frg_uvyp = tero.uvyplane;
  frg_uvzp = tero.uvzplane;
  frg_wpos = tero.wpossh;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_terrain1
  : iface_fdefault
  : lib_mmnoise {

  float ddd1 = clamp(1.0 - frg_camdist * 0.0007, 0, 1);
  float ddd2 = clamp(1.0 - frg_camdist * 0.002, 0, 1);
  float ddd3 = clamp(1.0 - frg_camdist * 0.003, 0, 1);

  const vec3 fogcolor = vec3(0.6, 0.6, 0.7);
  const vec3 ambient = vec3(0.6, 0.6, 0.65);
  const vec3 side = vec3(0.2, 0.2, 0.25);
  const vec3 top = vec3(0.3, 0.3, 0.3);

  vec3 n = normalize(frg_nrm);

  vec3 tpw = abs(n);
  tpw /= (tpw.x + tpw.y + tpw.z);

  const vec3 grass = vec3(0,1,0);
  const vec3 snow = vec3(1,1,1);
  const vec3 rock1 = vec3(0.6,.6,0.8);
  const vec3 rock2 = vec3(0.6,.6,0.7);

  float gsblend = clamp(frg_wpos.y*0.5,0,1);
  gsblend = smoothstep(0.6,0.61,gsblend);
  vec3 hor = mix( grass,
                  snow,
                  gsblend );

  vec3 c = hor*pow(tpw.y,0.5)
         + rock1*pow(tpw.x,0.5)
         + rock2*pow(tpw.z,0.5);

  vec3 lightcol = ambient + mix(side, top, dot(n, vec3(0, 1, 0)));
  c = lightcol*mix(fogcolor,c,ddd2);
  out_clr = vec4(c,1);//+vec3(u*0.25,v*0.25,0),1);
}
///////////////////////////////////////////////////////////////
// pick
///////////////////////////////////////////////////////////////
vertex_interface iface_vpick : ublock_vtx {
  //
  in vec4 position : POSITION;
  //
  out vec4 frg_nrmd;
}
fragment_interface iface_fpick : ublock_frg {
  in vec4 frg_nrmd;

  layout(location = 0) out vec4 out_clr;
  layout(location = 1) out vec4 out_nrmd;
}
vertex_shader vs_pick
  : iface_vpick
  : lib_terrain {
  vec3 campos = inverse(MatMV)[3].xyz;
  TerOut tero = computeTerrain(campos);
  ///////////////////////////
  // apply to GL
  ///////////////////////////
  gl_Position = MatMVP * vec4(tero.wpos, 1);
  frg_nrmd = vec4(tero.wnrm,distance(tero.wpos, campos));
}
fragment_shader ps_pick : iface_fpick {
  out_clr = modcolor;
  out_nrmd = frg_nrmd;
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default { inherits default; }
///////////////////////////////////////////////////////////////
technique terrain1 {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader = vs_terrain1;
    fragment_shader = ps_terrain1;
    state_block = sb_default;
  }
}
technique tek_pick {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader = vs_pick;
    fragment_shader = ps_pick;
    state_block = sb_default;
  }
}
