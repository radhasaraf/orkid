///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default
{
	glsl_version = "130";
	import "mathtools.i";
	import "misctools.i";
	import "envtools.i";
	import "brdftools.i";

}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
uniform_set ub_vtx {
	mat4        mv;
	mat4        mvp;
	vec2 InvViewportSize; // inverse target size
}
///////////////////////////////////////////////////////////////
uniform_set ub_frg {
    sampler2D prefiltmap;
		vec2 InvViewportSize; // inverse target size
		float roughness;
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default : default {
}
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
vertex_interface iface_vyo
	: ub_vtx {
    inputs {
	    vec4 position : POSITION;
	    vec2 uv0 : TEXCOORD0;
 	  }
    outputs {
      vec4 frg_clr;
	    vec2 frg_uv0;
	  }
}
///////////////////////////////////////////////////////////////
vertex_shader vs_yo
	: iface_vyo {
	gl_Position = mvp*position;
	frg_clr = vec4(1.0,1.0,1.0,1.0);
	frg_uv0 = uv0;//*vec2(1,-1);
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fyo
	: ub_frg
{
  inputs {
    vec4 frg_clr;
	  vec2 frg_uv0;
	}
	outputs {
    layout(location = 0) vec4 out_clr;
	}
}
///////////////////////////////////////////////////////////////
fragment_shader ps_filterSpecularEnvMap
	: iface_fyo
	: lib_math
	: lib_envmapping
	: lib_brdf {

	vec3 n = env_equirectangularUV2N(frg_uv0);
	vec3 r = n;
	vec3 v = r;
	vec3 o = vec3(0,0,0);
	float w = 0;
	//////////////////////////////////
	for( uint i=0; i<1024; i++){
		vec2 e = hammersley(i,1024);
		vec3 h = importanceSampleGGXN(e,n,roughness);
		vec3 l = normalize(2.0 * dot(v, h) * h - v);
		float ndotl = saturate(dot(n, l));
		if(ndotl > 0.0){
			vec2 luv = env_equirectangularN2UV(l);
		  o += texture(prefiltmap, luv).rgb * ndotl;
		  w += ndotl;
		}
	}
	//////////////////////////////////
	o = o/w;
	out_clr = vec4(o,1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_filterDiffuseEnvMap
	: iface_fyo
	: lib_math
	: lib_envmapping
	: lib_brdf {
	//////////////////////////////////
	vec3 n = env_equirectangularUV2N(frg_uv0);
	vec3 up    = vec3(0.0, 1.0, 0.0);
	vec3 right = cross(up,n);
	up         = cross(n,right);
	//////////////////////////////////
	vec3 o = vec3(0);
	float w = 0.0;
	float incr = 0.025;
	//////////////////////////////////
	for(float phi=0.0; phi<PI2; phi += incr){
		float cosphi = cos(phi);
		float sinphi = sin(phi);
    	for(float theta=0.0; theta<(PI*0.5); theta += incr) {
			float costheta = cos(theta);
			float sintheta = sin(theta);
			vec3 tangent = vec3(sintheta*cosphi,sintheta*sinphi,costheta);
			vec3 sampleN = tangent.x * right
                         + tangent.y * up
                         + tangent.z * n;
			vec2 luv = env_equirectangularN2UV(sampleN);
			o += texture(prefiltmap, luv).rgb*costheta*sintheta;
			w+=1.0;
    	}
	}
	//////////////////////////////////
	out_clr = vec4(o/w,1);
}
///////////////////////////////////////////////////////////////
technique tek_filterSpecularMap {
	fxconfig=fxcfg_default;
	pass p0 {
		vertex_shader=vs_yo;
		fragment_shader=ps_filterSpecularEnvMap;
		state_block=sb_default;
	}
}
///////////////////////////////////////////////////////////////
technique tek_filterDiffuseMap {
	fxconfig=fxcfg_default;
	pass p0 {
		vertex_shader=vs_yo;
		fragment_shader=ps_filterDiffuseEnvMap;
		state_block=sb_default;
	}
}
///////////////////////////////////////////////////////////////
