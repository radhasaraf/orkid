///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
  glsl_version = "330";
import "misctools.i";
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
uniform_block ub_vtx {
  uniform mat4 MVPC;
  uniform mat4 MVPL;
  uniform mat4 MVPR;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_vdefault : ub_vtx {
  in vec4 position : POSITION;
  in vec2 uv0 : TEXCOORD0;
  //
  out vec2 frg_uv;
}
///////////////////////////////////////////////////////////////

uniform_block ub_frg {
  uniform mat4 IVPArray[2];
  uniform sampler2D MapAlbedoAo;
  uniform sampler2D MapNormalL;
  uniform sampler2D MapDepth;
  uniform vec3 LightColor;
  uniform vec4 LightPosR;
  uniform vec2 InvViewportSize; // inverse target size
  uniform float Time;
}

fragment_interface iface_fdefault : ub_frg {
  in vec2 frg_uv;
  //
  out vec4 out_clr;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_vstereo : iface_vdefault { layout(secondary_view_offset = 1) out highp int gl_Layer; }
///////////////////////////////////////////////////////////////
vertex_shader vs_std : iface_vdefault {
  gl_Position = MVPC * position;
  frg_uv      = uv0;
}
///////////////////////////////////////////////////////////////
vertex_shader vs_std_stereo : iface_vstereo : extension(GL_NV_stereo_view_rendering)
    : extension(GL_NV_viewport_array2) {
  frg_uv = uv0;
  ///////////////////////////
  gl_Position                   = MVPL * position;
  gl_SecondaryPositionNV        = MVPR * position;
  gl_Layer                      = 0;
  gl_ViewportMask[0]            = 1;
  gl_SecondaryViewportMaskNV[0] = 2;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_baselight : iface_fdefault : lib_deferred {
  vec3 c  = baselighting(IVPArray[0]);
  out_clr = vec4(c, 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_baselight_stereo : extension(GL_ARB_fragment_layer_viewport)
    : iface_fdefault : lib_deferred {
  vec3 c  = baselighting(IVPArray[gl_Layer]);
  out_clr = vec4(c, 1);
}
///////////////////////////////////////////////////////////////
vertex_shader vs_pointlight : iface_vdefault {
  gl_Position = MVPC * position;
  frg_uv      = vec2(0, 0);
}
///////////////////////////////////////////////////////////////
vertex_shader vs_pointlight_stereo : iface_vstereo : extension(GL_NV_stereo_view_rendering)
    : extension(GL_NV_viewport_array2) {
  frg_uv = vec2(0, 0);
  ///////////////////////////
  gl_Position                   = MVPL * position;
  gl_SecondaryPositionNV        = MVPR * position;
  gl_Layer                      = 0;
  gl_ViewportMask[0]            = 1;
  gl_SecondaryViewportMaskNV[0] = 2;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_pointlight : iface_fdefault : lib_deferred {
  vec3 c  = pntlighting(IVPArray[0]);
  out_clr = vec4(c, 1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_pointlight_stereo : extension(GL_ARB_fragment_layer_viewport)
    : iface_fdefault : lib_deferred {
  vec3 c  = pntlighting(IVPArray[gl_Layer]);
  out_clr = vec4(c, 1);
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default { inherits default; }
///////////////////////////////////////////////////////////////
technique baselight {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_std;
    fragment_shader = ps_baselight;
    state_block     = sb_default;
  }
}
///////////////////////////////////////////////////////////////
technique baselight_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_std_stereo;
    fragment_shader = ps_baselight;
    state_block     = sb_default;
  }
}
///////////////////////////////////////////////////////////////
technique pointlight {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_pointlight;
    fragment_shader = ps_pointlight;
    state_block     = sb_default;
  }
}
///////////////////////////////////////////////////////////////
technique pointlight_stereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_pointlight_stereo;
    fragment_shader = ps_pointlight;
    state_block     = sb_default;
  }
}
