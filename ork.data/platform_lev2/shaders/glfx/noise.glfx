///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
	glsl_version = "410";
	//import "mathtools.i";
	import "gbuftools.i";
	//import "misctools.i";
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
uniform_set ublock_vtx {
	mat4        mvp;
	mat4        mvpL;
	mat4        mvpR;
	vec4        modcolor;
}
///////////////////////////////////////////////////////////////
uniform_set ublock_frg {
  sampler2D ColorMap;
  sampler3D VolumeMap;
	vec4 testvec4;
  float time;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_v_mono : ublock_vtx {
    inputs {
	    vec4 position : POSITION;
      vec4 vtxcolor : COLOR0;
	    vec2 uv0 : TEXCOORD0;
	    vec2 uv1 : TEXCOORD1;
	}
  outputs {
		  vec3 frg_pos;
      vec4 frg_clr;
	    vec2 frg_uv0;
	}
}
vertex_interface iface_v_stereo : iface_v_mono {
  outputs {
    layout(secondary_view_offset=1) int gl_Layer;
  }
}
///////////////////////////////////////////////////////////////
uniform_set ub_frg {
	vec4 modcolor;
}
fragment_interface iface_fmt : ub_frg {
    inputs {
	    //vec2 frg_uv;
	}
	outputs {
	    vec4 out_clr;
	}
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default : default{
}
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
vertex_shader vs_vtxcolor_mono
	: iface_v_mono
{
	gl_Position = mvp*position;
	frg_pos = position.xyz;
  frg_clr = vec4(vtxcolor.xyz,1);
  frg_uv0 = uv0;
}
vertex_shader vs_vtxcolor_stereo
	: iface_v_stereo
	: extension(GL_NV_stereo_view_rendering)
  : extension(GL_NV_viewport_array2) {
	gl_Position = mvpL*position;
	gl_SecondaryPositionNV = mvpR*position;
	frg_pos = position.xyz;
  frg_clr = vec4(vtxcolor.xyz,1);
  frg_uv0 = uv0;
  gl_Layer = 0;
	gl_ViewportMask[0] = 1;
	gl_SecondaryViewportMaskNV[0] = 2;
}
///////////////////////////////////////////////////////////////
fragment_interface iface_pbr_deferred : ublock_frg {
    inputs {
			vec3 frg_pos;
      vec4 frg_clr;
	    vec2 frg_uv;
	}
	outputs {
		layout(location = 0) uvec4 out_gbuf;
	}
}
libblock lib_mmnoise {
  float octavenoise(sampler3D krntex,vec3 pos,int numoct){
    int numoctaves = 8;
    float val = 0;
    float freq = 1.0;
    float amp = 0.25;
    float timesh = time;
    for( int i=0; i<numoctaves; i++ ){
      vec3 uvw = pos*freq;
      uvw += vec3(timesh*0.1/freq);
      val += texture(krntex,uvw).x*amp;
      freq *= 0.7;
      amp *= 0.8;
      timesh *= 0.5;
    }
    return val;
  }
}
///////////////////////////////////////////////////////////////
fragment_shader ps_deferred_emissive
  : iface_pbr_deferred
  : lib_gbuf_encode
	: lib_mmnoise  {
	vec3 pos = frg_pos+testvec4.xyz;
	float n = octavenoise(VolumeMap,pos,8);
	out_gbuf = packGbuffer_unlit(frg_clr.xyz*n);
}
///////////////////////////////////////////////////////////////
state_block sb_m1 : sb_default {
	DepthTest=OFF;
	DepthMask=true;
	CullTest=OFF;
	BlendMode = OFF;
}
///////////////////////////////////////////////////////////////
technique std_mono {
	fxconfig=fxcfg_default;
	pass p0 {
		vertex_shader=vs_vtxcolor_mono;
		fragment_shader=ps_deferred_emissive;
		state_block=sb_m1;
	}
}
technique std_stereo {
	fxconfig=fxcfg_default;
	pass p0 {
		vertex_shader=vs_vtxcolor_stereo;
		fragment_shader=ps_deferred_emissive;
		state_block=sb_m1;
	}
}
///////////////////////////////////////////////////////////////
