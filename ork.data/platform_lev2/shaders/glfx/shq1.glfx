///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default
{
	glsl_version = "130";
}
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
uniform_block ub_vtx
{
	uniform mat4        MatMVP;
	uniform mat4        MatMV;
	uniform mat4        MatM;
	uniform mat4        MatV;
	uniform mat4        MatP;
	uniform mat4        MatAux;
	uniform vec4   		User0; // buffersize

	uniform vec4        modcolor;
	uniform float       Time;
	
}
vertex_interface iface_vdefault
	: ub_vtx
{
	in vec4 position : POSITION;
	in vec4 vtxcolor : COLOR0;
	in vec2 uv0 : TEXCOORD0;
	in vec2 uv1 : TEXCOORD1;
	//
	out vec4 frg_clr;
	out vec2 frg_uv;
}
///////////////////////////////////////////////////////////////
uniform_block ub_frg
{
	uniform vec4 ModColor;
	uniform sampler2D ColorMap;
	uniform sampler2D ColorMap2;
	uniform sampler2D ColorMap3;	
	uniform vec4   		User0; // buffersize
	uniform float       Time;
}
fragment_interface iface_fmt
	: ub_frg
{
	in vec2 frg_uv;
	//
	out vec4 out_clr;
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_m1
{
	inherits default;
	DepthTest=OFF;
	//DepthMask=true;
	CullTest=OFF;
	//BlendMode = OFF;
}
///////////////////////////////////////////////////////////////
libblock shq_tools
{

	const int maxSteps = 128;
	const float epsilon = 0.001;
	const float dmax = 0.5;

	vec2 buffersize()
	{
		return vec2(User0.w,User0.w);
	}

	float de_sphere( vec3 p, vec3 ctr, float radius )
	{
		
		vec3 pp = p*vec3(1.0,1.0,1.0);
		vec3 dir = (pp-ctr);
		vec3 normal = normalize(dir);
		vec3 opos = normal;
		float angh = atan(opos.z,opos.x);
		float angv = atan(opos.z,opos.y);
		float dyn_radius = radius+sin(Time*3.0+angh*User0.x)*0.01;
		dyn_radius += sin(angv*10.0)*0.01;
		
		return length(pp-ctr)-dyn_radius;
	}

	///////////////////////////////////////////////////////////

	float rep_sphere( vec3 p )
	{
		float fs = 2.0+sin(Time*1.7)*0.1;
		float fc = 2.0+cos(Time)*0.1;
		
		vec2 rep = vec2(fs,fc);
		vec2 q = mod(p.xz,rep)-0.5*rep;
	    //vec3 q = mod(p,rep)-0.5*rep;
	    return de_sphere( vec3(q.x,p.y,q.y), vec3(0.0,0.0,0.0), 0.3 );
	}

	///////////////////////////////////////////////////////////

	float de( vec3 p )
	{
		float d = rep_sphere( p );
		
		return min( dmax,d );
		
	}

	vec3 getnormal(in vec3 p) {
		vec2 e = vec2(0.0, 0.001);
		
		return normalize(vec3(
			de(p + e.yxx) - de(p - e.yxx),
			de(p + e.xyx) - de(p - e.xyx),
			de(p + e.xxy) - de(p - e.xxy)));
	}

	vec4 raymarch(vec2 uvctr, vec3 rayOrigin, vec3 rayDirection) {
	    
		vec4 sky_color = texture( ColorMap, uvctr ); //vec4(rayDirection,1.0);

		float t = 0.0;
	    for(int i = 0; i < maxSteps; ++i) {
			vec3 p = rayOrigin + rayDirection * t;
	        float d = de(p);
	        if(d < epsilon) {
				
				vec3 n = getnormal(p);
							
				vec3 out_color = mix(n,sky_color.xyz,clamp(t*0.03,0.0,1.0));
				return vec4(out_color,1.0);
	        }
	        t += d*1.0; //0.03; //d;
	    }
	    return sky_color;
	}
}
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
vertex_shader vs_shq1 
	: iface_vdefault
{
	gl_Position = MatMVP*position;
	frg_clr = vtxcolor;
	frg_uv = uv0;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_shq1
	: iface_fmt
	: shq_tools
{
	vec2 uvctr = gl_FragCoord.xy / buffersize();

	float f = 1.0;
	vec3 eye = vec3(0.0,1.0,User0.z);
	vec3 right = vec3(1.0,0.0,0.0);
	vec3 forward = vec3(0.0,0.0,f);
	vec3 up = vec3(0.0,User0.y,0.0);

	vec3 e_ro = eye+forward+right*(uvctr.x-0.5) + up*(uvctr.y-0.5);
	vec3 e_rd = normalize(e_ro-eye);
	vec4 e_sample = raymarch(uvctr, e_ro, e_rd );

	out_clr = e_sample;
}
///////////////////////////////////////////////////////////////
technique shaderquad
{
	fxconfig=fxcfg_default;
	pass p0
	{	vertex_shader=vs_shq1;
		fragment_shader=ps_shq1;
		state_block=sb_m1;
	}	
}

///////////////////////////////////////////////////////////////

