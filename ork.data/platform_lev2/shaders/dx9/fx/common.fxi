///////////////////////////////////////////////////////////////////////////////
// Orkid
// Copyright 1996-2010, Michael T. Mayers
///////////////////////////////////////////////////////////////////////////////

texture		DiffuseMap;
texture		SpecularMap;
texture		AmbientMap;
texture		NormalMap;

texture		TopEnvMap;
texture		BotEnvMap;

float4x4	BoneMatrices[32];

///////////////////////////////////////////////////////////////////////////////

struct MrtPixel
{
	float4 DiffuseColor : COLOR0;
	float4 SpecularColor : COLOR1;
};

///////////////////////////////////////////////////////////////////////////////

sampler2D DiffuseNoFilterMapSampler = sampler_state
{
        Texture = <DiffuseMap>;
        MagFilter = POINT;
        MinFilter = POINT;
        MipFilter = NONE; // LINEAR NONE
};

///////////////////////////////////////////////////////////////////////////////

sampler2D TopEnvMapSampler = sampler_state
{
        Texture = <TopEnvMap>;
        MagFilter = LINEAR;
        MinFilter = LINEAR;
        MipFilter = LINEAR; // LINEAR NONE
};


///////////////////////////////////////////////////////////////////////////////

sampler2D BotEnvMapSampler = sampler_state
{
        Texture = <BotEnvMap>;
        MagFilter = LINEAR;
        MinFilter = LINEAR;
        MipFilter = LINEAR; // LINEAR NONE
};


///////////////////////////////////////////////////////////////////////////////

sampler2D DiffuseMapSampler = sampler_state
{
        Texture = <DiffuseMap>;
        MagFilter = LINEAR;
        MinFilter = LINEAR;
        MipFilter = LINEAR; // LINEAR NONE
};

///////////////////////////////////////////////////////////////////////////////

sampler2D AmbientMapSampler = sampler_state
{
        Texture = <AmbientMap>;
        MagFilter = LINEAR;
        MinFilter = LINEAR;
        MipFilter = LINEAR; // LINEAR NONE
};

///////////////////////////////////////////////////////////////////////////////

sampler3D VolumeMapSampler = sampler_state
{
        Texture = <SpecularMap>;
        MagFilter = LINEAR;
        MinFilter = LINEAR;
        MipFilter = LINEAR; // LINEAR NONE
};

///////////////////////////////////////////////////////////////////////////////

sampler2D NormalMapSampler = sampler_state
{
        Texture = <NormalMap>;
        MagFilter = LINEAR;
        MinFilter = LINEAR;
        MipFilter = LINEAR; // LINEAR NONE
};

///////////////////////////////////////////////////////////////////////////////

sampler2D SpecularMapSampler = sampler_state
{
        Texture = <SpecularMap>;
        MagFilter = LINEAR;
        MinFilter = LINEAR;
        MipFilter = LINEAR; // LINEAR NONE
};

///////////////////////////////////////////////////////////////////////////////

float4 PSFragColorWithTexAlphaClip( FragClrUv3 FragIn ) : COLOR
{
        float4 PixOut;
        float4 texA = tex2D( DiffuseMapSampler, FragIn.UV0.xy );
        PixOut = float4( FragIn.Color.xyzw );
        //clip(texA.w-0.5f);
        return PixOut;
}

///////////////////////////////////////////////////////////////////////////////

float4 PSFragColor( FragClrUv3 FragIn ) : COLOR
{
        float4 PixOut;
        PixOut = float4( FragIn.Color.xyzw );
        return PixOut;
}

///////////////////////////////////////////////////////////////////////////////

float2 RotFloat2( float2 InVec2, float ang )
{
	float sang = sin(ang);
	float cang = cos(ang);

	float2x2 RotMatrix = { cang, -sang,	sang, cang };

	const float2 uvctr = float2(0.5f,0.5f);
	return mul( InVec2-uvctr, RotMatrix)+uvctr;
}

///////////////////////////////////////////////////////////////////////////////

float3 SkinPosition( int4 BoneIndices, float4 BoneWeights, float3 InPos )
{
	float4 Pos4 = float4( InPos, 1.0f );

    int BoneA = BoneIndices.x;
    int BoneB = BoneIndices.y;
    int BoneC = BoneIndices.z;
    int BoneD = BoneIndices.w;

    const float4x4 BoneMatA = BoneMatrices[BoneA];
    const float4x4 BoneMatB = BoneMatrices[BoneB];
    const float4x4 BoneMatC = BoneMatrices[BoneC];
    const float4x4 BoneMatD = BoneMatrices[BoneD];

	const float kfw = 1.0f; //0.00390625f; // (1/256.0f);
	float BoneWgtA = BoneWeights.x*kfw;
	float BoneWgtB = BoneWeights.y*kfw;
	float BoneWgtC = BoneWeights.z*kfw;
	float BoneWgtD = BoneWeights.w*kfw;

	float3 WeightedVertex =  (mul(Pos4,BoneMatA)*BoneWgtA).xyz;
	       WeightedVertex += (mul(Pos4,BoneMatB)*BoneWgtB).xyz;
	       WeightedVertex += (mul(Pos4,BoneMatC)*BoneWgtC).xyz;
	       WeightedVertex += (mul(Pos4,BoneMatD)*BoneWgtD).xyz;
 
	return WeightedVertex;

}

///////////////////////////////////////////////////////////////////////////////

float3 SkinNormal( int4 BoneIndices, float4 BoneWeights, float3 InNrm )
{
	float4 Nrm4 = float4( InNrm, 0.0f );
	
    int BoneA = BoneIndices.x;
    int BoneB = BoneIndices.y;
    int BoneC = BoneIndices.z;
    int BoneD = BoneIndices.w;

    const float4x4 BoneMatA = BoneMatrices[BoneA];
    const float4x4 BoneMatB = BoneMatrices[BoneB];
    const float4x4 BoneMatC = BoneMatrices[BoneC];
    const float4x4 BoneMatD = BoneMatrices[BoneD];

	float BoneWgtA = BoneWeights.x;
	float BoneWgtB = BoneWeights.y;
	float BoneWgtC = BoneWeights.z;
	float BoneWgtD = BoneWeights.w;

	float4 WeightedNormal =  mul(Nrm4,BoneMatA)*BoneWgtA;
	       WeightedNormal += mul(Nrm4,BoneMatB)*BoneWgtB;
	       WeightedNormal += mul(Nrm4,BoneMatC)*BoneWgtC;
	       WeightedNormal += mul(Nrm4,BoneMatD)*BoneWgtD;
 
	return normalize(WeightedNormal.xyz);

}

///////////////////////////////////////////////////////////////////////////////

void DualParaboloidEnv( in float3 wVtxNrm, in float3 wVtx2Eye, out float2 topuv, out float2 botuv, out float refly )
{
    float3 R = normalize(reflect( wVtx2Eye, wVtxNrm ));

    float firy = 1.0f / (2*(1 + R.y));
    float firy2 = 1.0f / (2*(1 - R.y));

	/////////////////
	// top
	/////////////////
    topuv.x =    saturate( (R.x * firy  ) + 0.5 );
    topuv.y =    saturate( (R.z * firy  ) + 0.5 );
    
	/////////////////
	// bottom
	/////////////////
    botuv.x  =    saturate( (R.x * firy2 ) + 0.5 );
    botuv.y  =    saturate( (R.z * firy2 ) + 0.5 );
    
    refly = R.y;
}

///////////////////////////////////////////////////////////////////////////////
