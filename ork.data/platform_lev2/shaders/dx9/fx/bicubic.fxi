///////////////////////////////////////////////////////////////////////////////
// Orkid
// Copyright 1996-2010, Michael T. Mayers
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//BICUBIC TEXTURE FILTERING
///////////////////////////////////////////////////////////////////////////////
// compute 4 weights using the cubic polynomial:
// w = (A+2.0)*x^3 - (A+3.0)*x^2         + 1.0    for 0<x<1
// w = A*x^3 -       5.0*A*x^2 + 8.0*A*x - 4.0*A  for 1<x<2
// A controls sharpness
///////////////////////////////////////////////////////////////////////////////

float4 bicubic_computeWeights(float x)
{
	// calculate weights in parallel
	float4 x1 = x*float4(1,1,-1,-1) + float4(1,0,1,2); // (x+1, x, 1-x, 2-x)
	float4 x2 = x1*x1;
	float4 x3 = x2*x1;
	
//	const float A = -1;
	const float A = -0.75;
	float4 w;	
	w =  x3 * float2(  A,      A+2.0).xyyx;
	w += x2 * float2( -5.0*A, -(A+3.0)).xyyx;
	w += x1 * float2(  8.0*A,  0).xyyx;
	w +=      float2( -4.0*A,  1.0).xyyx;
	return w;
}

// filter 4 values
float4 bicubic_Filter(float4 w, float4 c0, float4 c1, float4 c2, float4 c3)
{
	return c0*w[0] + c1*w[1] + c2*w[2] + c3*w[3];
}

///////////////////////////////////////////////////////////////////////////////

float4 BiCubicSampleTex2D( sampler2D tex, float2 t, float imageSize, float texelSize )
{
	float2 f = frac(t*imageSize);	// fractional position within texel
	texelSize = 1.0f / imageSize;
	// filter in x
	float4 w = bicubic_computeWeights(f.x);
	float4 t0 = bicubic_Filter(w,	tex2D(tex, t+float2(-1, -1)*texelSize),
							  		tex2D(tex, t+float2(0, -1)*texelSize),
							  		tex2D(tex, t+float2(1, -1)*texelSize),
							  		tex2D(tex, t+float2(2, -1)*texelSize) );
	float4 t1 = bicubic_Filter(w,	tex2D(tex, t+float2(-1, 0)*texelSize),
									tex2D(tex, t+float2(0, 0)*texelSize),
									tex2D(tex, t+float2(1, 0)*texelSize),
									tex2D(tex, t+float2(2, 0)*texelSize) );
	float4 t2 = bicubic_Filter(w,	tex2D(tex, t+float2(-1, 1)*texelSize),
									tex2D(tex, t+float2(0, 1)*texelSize),
									tex2D(tex, t+float2(1, 1)*texelSize),
									tex2D(tex, t+float2(2, 1)*texelSize) );
	float4 t3 = bicubic_Filter(w,	tex2D(tex, t+float2(-1, 2)*texelSize),
									tex2D(tex, t+float2(0, 2)*texelSize),
									tex2D(tex, t+float2(1, 2)*texelSize),
									tex2D(tex, t+float2(2, 2)*texelSize) );
	// filter in y								
	w = bicubic_computeWeights(f.y);
	return bicubic_Filter(w, t0, t1, t2, t3);
	return w;
}

///////////////////////////////////////////////////////////////////////////////
// handcoded BILINEAR texture sampler (because not every sm30 card produces identical results)
//  this is for GPGPU use only, if you are just drawing textured poly's
//  use the hardwares built in bilinear filters instead , as these will be slower (but more precise)
///////////////////////////////////////////////////////////////////////////////

float4 BiLinearSampleTex2D( sampler2D PointSampler, float2 uvc, float imageSize, float texelSize )
{
	float2 uv0 = floor(uvc*imageSize)/imageSize;
	float2 uv3 = uv0+float2(texelSize,texelSize);

	float2 fruv = frac(uvc*imageSize);	// fractional position within texel

	float4 sampC = tex2D( PointSampler, uvc );
	float4 samp0 = tex2D( PointSampler, uv0 );
	float4 samp1 = tex2D( PointSampler, uv0 + float2(texelSize,0.0f) );
	float4 samp2 = tex2D( PointSampler, uv0 + float2(0.0f,texelSize) );
	float4 samp3 = tex2D( PointSampler, uv0 + float2(texelSize,texelSize) );

	float4 sampX0 = lerp( samp0, samp1, fruv.x );
	float4 sampX1 = lerp( samp2, samp3, fruv.x );

	float4 sampY = lerp( sampX0, sampX1, fruv.y );
	
	return sampY;
}
