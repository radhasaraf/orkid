///////////////////////////////////////////////////////////////////////////////
// Orkid
// Copyright 1996-2010, Michael T. Mayers
///////////////////////////////////////////////////////////////////////////////

uniform float4x4        MatMVP;
uniform float4x4        MatM;
uniform float4x4        MatMV;
uniform float4x4        MatP;
uniform float4x4        MatAux;
uniform float4			modcolor;
uniform float4x4        User0;
uniform float			Time;
uniform float4			NoiseShift;
uniform float4			NoiseFreq;
uniform float4			NoiseAmp;

sampler3D VolumeMap = sampler_state
{
    MagFilter = Nearest;
    MinFilter = Nearest;
    WrapS = Repeat;
    WrapT = Repeat;
};
sampler2D ColorMap = sampler_state
{
    MagFilter = Linear;
    MinFilter = LinearMipmapLinear;
    WrapS = Repeat;
    WrapT = Repeat;
//    LODBias = 0.0f;
  //  GenerateMipMap = false;
};
/*sampler2D ColorMap2 = sampler_state
{
    MagFilter = Linear;
    MinFilter = LinearMipmapLinear;
    WrapS = Repeat;
    WrapT = Repeat;
    LODBias = 0.0f;
    GenerateMipMap = false;
};
sampler2D ColorMap3 = sampler_state
{
    MagFilter = Linear;
    MinFilter = LinearMipmapLinear;
    WrapS = Repeat;
    WrapT = Repeat;
    LODBias = 0.0f;
    GenerateMipMap = false;
};
sampler2D ColorMap4 = sampler_state
{
    MagFilter = Linear;
    MinFilter = LinearMipmapLinear;
    WrapS = Repeat;
    WrapT = Repeat;
    LODBias = 0.0f;
    GenerateMipMap = false;
};*/

///////////////////////////////////////////////////////////////////////////////

struct SimpleVertex
{
    float4 Position             : POSITION;
    float4 Color                : COLOR;
};
struct UvVertex
{
    float4 Position             : POSITION;
    float4 Uv0					: TEXCOORD0;
    float4 Uv1					: TEXCOORD1;
    float4 Color                : COLOR;
};

///////////////////////////////////////////////////////////////////////////////

struct VtxOut
{
    float4 ClipPos : POSITION;
	float4 Color : COLOR;
	float4 Uv0 : TEXCOORD0;
	float4 Uv1 : TEXCOORD1;
	float3 XYZ : TEXCOORD2;
};

///////////////////////////////////////////////////////////////////////////////

struct MrtPixel
{
	float4	DiffuseBuffer	: COLOR0;	
//	float4	SpecularBuffer	: COLOR1;	
};

///////////////////////////////////////////////////////////////////////////////

VtxOut VSVtxColor( SimpleVertex VtxIn )
{
    VtxOut FragOut;

    FragOut.ClipPos = mul( VtxIn.Position, MatMVP );
//    FragOut.ClipPos = mul( MatMVP,VtxIn.Position );
	FragOut.Color = VtxIn.Color;
    return FragOut;
}

///////////////////////////////////////////////////////////////////////////////

VtxOut VSVtxTexColor( UvVertex VtxIn )
{
    VtxOut FragOut;

    FragOut.ClipPos = mul( VtxIn.Position, MatMVP );
	FragOut.Color = VtxIn.Color;
	FragOut.Uv0 = VtxIn.Uv0;
	FragOut.Uv1 = VtxIn.Uv1;
	FragOut.XYZ = VtxIn.Position.xyz;
    return FragOut;
}

///////////////////////////////////////////////////////////////////////////////

MrtPixel PSModColor( VtxOut FragIn )
{
	MrtPixel Out;
	Out.DiffuseBuffer = modcolor*FragIn.Color;
//	Out.SpecularBuffer = modcolor;
    return Out;
}
MrtPixel ps_modtexclr( VtxOut FragIn )
{
	MrtPixel Out;
	float4 Uv0 = float4(FragIn.Uv0.xy,0.0f,4.0f);
    float4 TexInp = tex2D( ColorMap, Uv0.xy );
    //float4 TexInp = tex2Dlod( ColorMap, Uv0 );
	Out.DiffuseBuffer = TexInp.bgra*modcolor*FragIn.Color.bgra;
	//Out.DiffuseBuffer = TexInp.bgra;
    return Out;
}
MrtPixel ps_volnoise( VtxOut FragIn )
{
	MrtPixel Out;

	float3 Offset0 = float3( Time*NoiseShift.x, 0.0f, 0.0f );
	float3 Offset1 = float3( 0.0f, Time*NoiseShift.y, 0.0f );
	float3 Offset2 = float3( 0.0f, 0.0f, Time*NoiseShift.z );

    float4 TexInp0 = tex3D( VolumeMap, Offset0+FragIn.XYZ*NoiseFreq.x )*NoiseAmp.x;
    float4 TexInp1 = tex3D( VolumeMap, Offset1+FragIn.XYZ*NoiseFreq.y )*NoiseAmp.y;
    float4 TexInp2 = tex3D( VolumeMap, Offset2+FragIn.XYZ*NoiseFreq.z )*NoiseAmp.z;
	float4 TexInp = TexInp0+TexInp1+TexInp2;

	float4 ColorInp = tex2D( ColorMap, float2(TexInp.x,TexInp.y) );

	Out.DiffuseBuffer = ColorInp*modcolor*FragIn.Color.bgra;
    return Out;
}

MrtPixel ps_volume( VtxOut FragIn )
{
	MrtPixel Out;

	float2 uv = FragIn.Uv0.xy;
	float w = FragIn.Uv1.x;//*NoiseFreq.x;
	float3 uvw = float3(uv,w);
    float4 TexInp0 = tex3D( VolumeMap, uvw ).xyzw;
	//float A = FragIn.Color.a; //TexInp0.a*FragIn.Color.a;
	Out.DiffuseBuffer = TexInp0.bgra*modcolor*FragIn.Color.bgra;
    //Out.DiffuseBuffer = float4(FragIn.Uv1.xy,0.0f,1.0f);
    return Out;
}
///////////////////////////////////////////////////////////////////////////////

technique tvolnoiseparticle // just vertex colors
{
    pass p0
    {
        VertexShader = compile glslv VSVtxTexColor();
        PixelShader = compile glslf ps_volnoise();
    }
}
technique tvolumeparticle // just vertex colors
{
    pass p0
    {
        VertexShader = compile glslv VSVtxTexColor();
        PixelShader = compile glslf ps_volume();
		BlendEnable=true;
		BlendFunc = int2(SrcAlpha,One);
    }
}
technique tbasicparticle // just vertex colors
{
    pass p0
    {
        VertexShader = compile glslv VSVtxTexColor();
        PixelShader = compile glslf ps_modtexclr();
    }
}
technique tbasicparticle_pick // just vertex colors
{
    pass p0
    {
        VertexShader = compile glslv VSVtxTexColor();
        PixelShader = compile glslf ps_modtexclr();
    }
}

///////////////////////////////////////////////////////////////////////////////
