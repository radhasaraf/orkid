///////////////////////////////////////////////////////////////////////////////
// Orkid
// Copyright 1996-2010, Michael T. Mayers
///////////////////////////////////////////////////////////////////////////////

uniform float4x4        WVPMatrix;
uniform float4x4        VPMatrix;
uniform float4x4        PMatrix;
uniform float4x4        WMatrix;
uniform float4x4        WVMatrix;
uniform float4x4        VMatrix;
uniform float4x4        WRotMatrix;
uniform float4x4        DiffuseMapMatrix;
uniform float4x4        NormalMapMatrix;
uniform float4x4        SpecularMapMatrix;

uniform float4x4        BoneMatrices[32] : BoneMatrices;

uniform float4          modcolor;
uniform float           time;

uniform float3			AmbientLight;
uniform int				NumDirectionalLights;
uniform float3			DirectionalLightDir[4];
uniform float3			DirectionalLightColor[4];
uniform float3			EmissiveColor;

uniform float3			WCamLoc;
uniform float			SpecularPower;

///////////////////////////////////////////////////////////////////////////////

sampler2D DiffuseMap = sampler_state
{
    MagFilter = NEAREST;
    MinFilter = NEAREST;
};

sampler2D SpecularMap = sampler_state
{
    MagFilter = NEAREST;
    MinFilter = NEAREST;
};

sampler2D AmbientMap = sampler_state
{
    MagFilter = NEAREST;
    MinFilter = NEAREST;
};

sampler2D NormalMap = sampler_state
{
    MagFilter = NEAREST;
    MinFilter = NEAREST;
};

///////////////////////////////////////////////////////////////////////////////

struct SimpleVertex
{
    float3 Position : POSITION;
    float3 Normal : NORMAL;
    float2 Uv0 : TEXCOORD0;
};

struct SkinnedVertex
{
    float3 Position             : POSITION;
    float2 Uv0                  : TEXCOORD0;
    float3 Normal               : NORMAL;
    float4 BoneIndices          : COLOR0;
    float4 BoneWeights          : COLOR1;
};

///////////////////////////////////////////////////////////////////////////////

struct Fragment
{
    float4 ClipPos : Position;
    float4 Color   : Color;
    float2 Uv0 : TEXCOORD0;
};

///////////////////////////////////////////////////////////////////////////////

Fragment VSLambertTex( SimpleVertex VtxIn )
{
    Fragment FragOut;

    float4 WorldPos = mul( float4( VtxIn.Position, 1.0f ), WMatrix );
    float3 WorldNormal = normalize( mul( float4(VtxIn.Normal,0.0f), WRotMatrix ).xyz );
    FragOut.ClipPos = mul( float4( VtxIn.Position, 1.0f ), WVPMatrix );
            	
	//float3 DiffuseAccum = saturate(		PerVertexDiffuseLight(0,WorldNormal)
	//								+	PerVertexDiffuseLight(1,WorldNormal)
	//								+	PerVertexDiffuseLight(2,WorldNormal)
	//								+	PerVertexDiffuseLight(3,WorldNormal)
	//								+	EmissiveColor );
 
	float Diffuse = dot( WorldNormal, float3( 1.0f, 0.0f, 0.0f ) );//float4( WorldNormal, 1.0f ); //;
    FragOut.Color = float4( DirectionalLightColor[0], 1.0f );
    FragOut.Uv0 = mul( float4( VtxIn.Uv0, 0.0f, 1.0f ), DiffuseMapMatrix ).xy;
    //FragOut.UV1 = VtxIn.Position;
    //FragOut.UV2 = VtxIn.Normal;        
    return FragOut;
}

///////////////////////////////////////////////////////////////////////////////

float4 ps_fragcolor( Fragment FragIn ) : COLOR
{
    float4 PixOut;
    PixOut = FragIn.Color;
    return PixOut;
}

float4 ps_texcolor( Fragment FragIn ) : COLOR
{
    float4 PixOut = FragIn.Color*tex2D( DiffuseMap, FragIn.Uv0*float2(1.0f,-1.0f) ) * modcolor;
    return PixOut;
}

///////////////////////////////////////////////////////////////////////////////

float3 SkinPosition4( float4 BoneIndices, float4 BoneWeights, float3 InPos )
{
    float4 Pos4 = float4( InPos, 1.0f );
    const float kfw = 0.00390625f; // (1/256.0f);

    int i0 = int(BoneIndices.x*8.0f);
    int i1 = int(BoneIndices.y*8.0f);
    int i2 = int(BoneIndices.z*8.0f);
    int i3 = int(BoneIndices.w*8.0f);

    float w0 = BoneWeights.x;
    float w1 = BoneWeights.y;
    float w2 = BoneWeights.z;
    float w3 = BoneWeights.w;

    float wt = (w0+w1+w2) * 0.5f;

    float3 WeightedVertex =  (mul(BoneMatrices[i0],Pos4)).xyz;
           //WeightedVertex += (mul(BoneMatrices[i1],Pos4)*w1).xyz;
           //WeightedVertex += (mul(BoneMatrices[i2],Pos4)*w2).xyz;
           //WeightedVertex += (mul(BoneMatrices[i3],Pos4)*w3).xyz;
 
    return normalize(WeightedVertex.xyz);
    //return float3(wt,wt,wt);
}

Fragment vs_modcolor( SimpleVertex VtxIn )
{
    Fragment FragOut;
    FragOut.ClipPos = mul( float4( VtxIn.Position, 1.0f ), WVPMatrix );
    FragOut.Color = modcolor;
    return FragOut;
}
Fragment vs_wnormal( SimpleVertex VtxIn )
{
    Fragment FragOut;
    FragOut.ClipPos = mul( float4( VtxIn.Position, 1.0f ), WVPMatrix );
	float4 wnorm = mul( float4(VtxIn.Normal.xyz,0.0f), WRotMatrix );
    FragOut.Color = float4(normalize(wnorm.xyz),1.0f);
    return FragOut;
}
Fragment vs_wnormal_skinned( SkinnedVertex VtxIn )
{
    Fragment FragOut;
    float3 skpos = SkinPosition4( VtxIn.BoneIndices, VtxIn.BoneWeights, VtxIn.Position.xyz );
    FragOut.ClipPos = mul( float4( VtxIn.Position.xyz, 1.0f ), WVPMatrix );
    float4 wnorm = mul( float4(VtxIn.Normal.xyz,0.0f), WRotMatrix );
    FragOut.Color = float4(skpos.xyz,1.0f);
    return FragOut;
}

///////////////////////////////////////////////////////////////////////////////

technique tek_lamberttex
{
	pass p0
	{
		VertexShader = compile glslv VSLambertTex();
		PixelShader = compile glslf ps_texcolor();
		DepthTestEnable=true;
		DepthMask=true;
	}
}
technique tek_modcolor
{
	pass p0
	{
		VertexShader = compile glslv vs_modcolor();
		PixelShader = compile glslf ps_fragcolor();
		DepthTestEnable=true;
		DepthMask=true;
	}
}
technique tek_wnormal_skinned
{
    pass p0
    {
        VertexShader = compile glslv vs_wnormal_skinned();
        PixelShader = compile glslf ps_fragcolor();
        DepthTestEnable=true;
        DepthMask=true;
    }
}
technique tek_wnormal
{
	pass p0
	{
		VertexShader = compile glslv vs_wnormal();
		PixelShader = compile glslf ps_fragcolor();
		DepthTestEnable=true;
		DepthMask=true;
	}
}

