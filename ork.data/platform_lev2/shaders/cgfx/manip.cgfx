///////////////////////////////////////////////////////////////////////////////
// Orkid
// Copyright 1996-2010, Michael T. Mayers
///////////////////////////////////////////////////////////////////////////////

uniform float4x4        mvp;
uniform float4			modcolor;

///////////////////////////////////////////////////////////////////////////////

struct SimpleVertex
{
    float4 Position             : POSITION;
    //float4 Color                : COLOR;
};

///////////////////////////////////////////////////////////////////////////////

struct VtxOut
{
    float4 ClipPos : POSITION;
};

///////////////////////////////////////////////////////////////////////////////

struct MrtPixel
{
	float4	DiffuseBuffer	: COLOR0;	
//	float4	SpecularBuffer	: COLOR1;	
};

///////////////////////////////////////////////////////////////////////////////

VtxOut VSVtxColor( SimpleVertex VtxIn )
{
    VtxOut FragOut;

    FragOut.ClipPos = mul( VtxIn.Position, mvp );
    return FragOut;
}

///////////////////////////////////////////////////////////////////////////////

MrtPixel PSModColor( VtxOut FragIn )
{
	MrtPixel Out;
	Out.DiffuseBuffer = modcolor;
//	Out.SpecularBuffer = modcolor;
    return Out;
}

///////////////////////////////////////////////////////////////////////////////

MrtPixel PSModColorD2( VtxOut FragIn )
{
	MrtPixel Out;
	float4 outcolor = float4( (modcolor.xyz*0.5f), 0.3f );
	Out.DiffuseBuffer = outcolor;
//	Out.SpecularBuffer = modcolor;
    return Out;
}

///////////////////////////////////////////////////////////////////////////////

MrtPixel PSModColorD3( VtxOut FragIn )
{
	MrtPixel Out;
	float4 outcolor = float4( (modcolor.xyz*0.3f), 1.0f );
	Out.DiffuseBuffer = outcolor;
//	Out.SpecularBuffer = modcolor;
    return Out;
}
///////////////////////////////////////////////////////////////////////////////

technique std // just vertex colors
{
	pass p0
    {
        VertexShader = compile glslv VSVtxColor();
        PixelShader = compile glslf PSModColorD2();
		DepthTestEnable=false;
		DepthMask=false;
		CullFace = Front;
		CullFaceEnable = true;
		BlendEnable = true;
		BlendFunc = int2(SrcAlpha,OneMinusSrcAlpha);
    }
    pass p1
    {
        VertexShader = compile glslv VSVtxColor();
        PixelShader = compile glslf PSModColorD2();
		DepthTestEnable=false;
		DepthMask=false;
		CullFace = Back;
		CullFaceEnable = true;
		BlendEnable = true;
		BlendFunc = int2(SrcAlpha,OneMinusSrcAlpha);
    }
    pass p2
    {
        VertexShader = compile glslv VSVtxColor();
        PixelShader = compile glslf PSModColorD3();
		DepthTestEnable=true;
		DepthMask=true;
		DepthFunc = LEqual;
		CullFace = Front;
		CullFaceEnable = true;
		BlendEnable = true;
		BlendFunc = int2(One,One);
    }
    pass p3
    {
        VertexShader = compile glslv VSVtxColor();
        PixelShader = compile glslf PSModColorD3();
		DepthTestEnable=true;
		DepthMask=true;
		DepthFunc = LEqual;
		CullFace = Back;
		CullFaceEnable = true;
		BlendEnable = true;
		BlendFunc = int2(One,One);
    }
}
technique pick // just vertex colors
{
    pass p0
    {
        VertexShader = compile glslv VSVtxColor();
        PixelShader = compile glslf PSModColor();
		DepthTestEnable=false;
		CullFace = Back;
		CullFaceEnable = false;
		BlendEnable = false;
    }
}

///////////////////////////////////////////////////////////////////////////////
