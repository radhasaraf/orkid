///////////////////////////////////////////////////////////////////////////////
// Orkid
// Copyright 1996-2010, Michael T. Mayers
///////////////////////////////////////////////////////////////////////////////

uniform float4x4 mvp;
uniform float4 ModColor;

///////////////////////////////////////////////////////////////////////////////

sampler2D ColorMap = sampler_state
{
	//Texture = <ColorMap>;
    MagFilter = Linear;
	MinFilter = LinearMipmapLinear;
    //MinFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
    WrapR = Repeat;
    LODBias = 0.0f;
    GenerateMipMap = false;
};

///////////////////////////////////////////////////////////////////////////////

struct SimpleVertex
{
	float3 Position	: POSITION;
	float3 Uv0		: TEXCOORD0;
};

struct ColorVertex
{
	float3 Position	: POSITION;
	float4 Color	: COLOR0;
};

struct Fragment
{
    float4 ClipPos	: POSITION;
	float3 Uv0		: TEXCOORD0;
	float4 Color	: COLOR0;
};

///////////////////////////////////////////////////////////////////////////////

Fragment VSUI( SimpleVertex VtxIn )
{
    float4 vpos = float4( VtxIn.Position, 1.0f );
    float4 npos = mul( vpos, mvp );

	const float uvscale = 1.0f; //1.0f/32768.0f;
    Fragment FragOut;
    FragOut.ClipPos = npos;
    FragOut.Uv0 = VtxIn.Uv0*uvscale;
    FragOut.Color = float4(VtxIn.Uv0,1.0f);
    return FragOut;
}

Fragment VSVTXCOLOR( ColorVertex VtxIn )
{
    float4 vpos = float4( VtxIn.Position, 1.0f );
    float4 npos = mul( vpos, mvp );

    Fragment FragOut;
    FragOut.ClipPos = npos;
    FragOut.Color = VtxIn.Color;
    FragOut.Uv0 = float3(0.0f,0.0f,0.0f);
    return FragOut;
}

Fragment VSUITEXT( SimpleVertex VtxIn )
{
    float4 vpos = float4( VtxIn.Position, 1.0f );
    float4 npos = mul( vpos, mvp );
    
    Fragment FragOut;
    FragOut.ClipPos = npos;
	
	float3 uv0 = VtxIn.Uv0;
    FragOut.Uv0 = uv0;
    FragOut.Color = float4(uv0,1.0f);;
    return FragOut;
}

///////////////////////////////////////////////////////////////////////////////

float4 PSTextured( Fragment FragIn ) : COLOR
{
	float2 Uv0 = FragIn.Uv0.xy;
    float4 PixOut = tex2D( ColorMap, Uv0 );
    //float4 PixOut = FragIn.Color;
    return PixOut;
}

///////////////////////////////////////////////////////////////////////////////

float4 PSModTex( Fragment FragIn ) : COLOR
{
	float2 Uv0 = FragIn.Uv0.xy;
    float4 PixOut = tex2D( ColorMap, Uv0 );//*ModColor;
	PixOut.a = PixOut.r;
    return PixOut;
}

///////////////////////////////////////////////////////////////////////////////

float4 PSKeyTex( Fragment FragIn ) : COLOR
{
	float4 PixOut;
	float2 Uv0 = FragIn.Uv0.xy;
	float4 Tex = tex2D( ColorMap, Uv0 );
    float mask = Tex.r;
	PixOut.rgb = ModColor.rgb;
	PixOut.a = Tex.r;
    return PixOut;
}

///////////////////////////////////////////////////////////////////////////////

float4 PSFragment( Fragment FragIn ) : COLOR
{
    float4 PixOut = FragIn.Color; //float4(1.0f,0.0f,0.0f,1.0f);
    return PixOut;
}

///////////////////////////////////////////////////////////////////////////////

float4 PSModColor( Fragment FragIn ) : COLOR
{
    return ModColor;
}

///////////////////////////////////////////////////////////////////////////////

technique uitext
{
    pass
    {
        VertexProgram = compile glslv VSUITEXT();
        FragmentProgram = compile glslf PSKeyTex(); 
		AlphaTestEnable=true;
		AlphaFunc = float2(Greater, 0.0);
		BlendEnable = true;
		BlendFunc = int2(SrcAlpha,OneMinusSrcAlpha);
		//AlphaTest=GREATER;
		//AlphaRef=0;
    }
}
technique uidev_modcolor
{
    pass
    {
        VertexProgram = compile glslv VSUI();
        FragmentProgram = compile glslf PSModColor(); 
    }
}
technique uicolor
{
    pass
    {
        VertexProgram = compile glslv VSUI();
        FragmentProgram = compile glslf PSModColor(); 
    }
}
technique uicircle
{
    pass
    {
        VertexProgram = compile glslv VSUI();
        FragmentProgram = compile glslf PSModColor(); 
    }
}

technique uitextured
{
    pass
    {
        VertexProgram = compile glslv VSUI();
        FragmentProgram = compile glslf PSTextured();
    }
}


technique ui_vtx
{
    pass
    {
        VertexProgram = compile glslv VSVTXCOLOR();
        FragmentProgram = compile glslf PSFragment();
    }
}
technique ui_vtxmod
{
    pass
    {
        VertexProgram = compile glslv VSUI();
        FragmentProgram = compile glslf PSModColor();
    }
}


///////////////////////////////////////////////////////////////////////////////
