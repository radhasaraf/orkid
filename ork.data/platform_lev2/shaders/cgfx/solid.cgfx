///////////////////////////////////////////////////////////////////////////////
// Orkid
// Copyright 1996-2010, Michael T. Mayers
///////////////////////////////////////////////////////////////////////////////

uniform float4x4        MatMVP;
uniform float4x4        MatMV;
uniform float4x4        MatM;
uniform float4x4        MatV;
uniform float4x4        MatP;
uniform float4x4        MatAux;

uniform float4          modcolor;
uniform float           Time;

///////////////////////////////////////////////////////////////////////////////

sampler2D ColorMap = sampler_state
{
    MagFilter = Linear;
    MinFilter = LinearMipmapLinear;
    WrapS = Repeat;
    WrapT = Repeat;
//    LODBias = 0.0f;
  //  GenerateMipMap = false;
};
sampler2D ColorMap2 = sampler_state
{
    MagFilter = Linear;
    MinFilter = LinearMipmapLinear;
    WrapS = Repeat;
    WrapT = Repeat;
//    LODBias = 0.0f;
  //  GenerateMipMap = false;
};
sampler2D ColorMap3 = sampler_state
{
    MagFilter = Linear;
    MinFilter = LinearMipmapLinear;
    WrapS = Repeat;
    WrapT = Repeat;
};

///////////////////////////////////////////////////////////////////////////////

struct SimpleVertex
{
    float3 Position : POSITION;
    float3 Normal : NORMAL;
    float2 Uv0 : TEXCOORD0;
};

struct ColorVertex
{
    float3 Position : POSITION;
    float4 Color : COLOR0;
    float2 Uv0 : TEXCOORD0;
};

///////////////////////////////////////////////////////////////////////////////

struct Fragment
{
    float4 ClipPos : POSITION;
    float4 Color   : COLOR;
    float2 Uv0 : TEXCOORD0;
};
struct Fragment2Uv
{
    float4 ClipPos : POSITION;
    float4 Color   : COLOR;
    float2 Uv0 : TEXCOORD0;
    float2 Uv1 : TEXCOORD1;
};

///////////////////////////////////////////////////////////////////////////////

float4 PSFragColor( Fragment FragIn ) : COLOR
{
    float4 PixOut;
    PixOut = FragIn.Color;
    return PixOut;
}

float4 PSModColor( Fragment FragIn ) : COLOR
{
    float4 PixOut;
    PixOut = modcolor;
    return PixOut;
}

float4 PSTexModColorFB( Fragment FragIn ) : COLOR
{
    float4 PixOut;
    float2 uv0 = tex2D( ColorMap3, FragIn.Uv0.xy ).xy;
    float t0 = tex2D( ColorMap, FragIn.Uv0.xy ).x;
    PixOut = float4( FragIn.Color.xyz, t0.x*FragIn.Color.w );
    //PixOut = float4( 1.0f,0.0f,0.0f,0.5f );
    return PixOut;
}
Fragment vs_distorted_feedback( ColorVertex VtxIn )
{
    Fragment FragOut;
    
	const float kftexX = 1.0f/512.0f;
	const float kftexY = 0.0f/512.0f;
    float2 outuv = mul( float4( VtxIn.Uv0.xy,0.0f,1.0f),MatAux).xy;
    
	FragOut.ClipPos = TransformVertex( VtxIn.Position );
    FragOut.Uv0.x = outuv.x+kftexX;
    FragOut.Uv0.y = outuv.y+kftexY;
    FragOut.Color = modcolor;
    return FragOut;
}
float4 ps_distorted_feedback( Fragment FragIn ) : COLOR
{
    float4 PixOut;
    float3 uv0 = tex2D( ColorMap3, FragIn.Uv0.xy ).xyz;
    float3 t0 = tex2D( ColorMap, uv0.zy ).xyz;
    PixOut = float4( t0.xyz*FragIn.Color.w, 1.0f );
    //PixOut = float4( 1.0f,0.0f,0.0f,0.5f );
    return PixOut;
}

float4 PSTexModColor( Fragment FragIn ) : COLOR
{
    float4 PixOut;
 	float4 t0 = tex2D( ColorMap, FragIn.Uv0.xy );
    PixOut = t0 * modcolor;
    return PixOut;
}

float4 PSTexVtxColor( Fragment FragIn ) : COLOR
{
    float4 PixOut;
 	float4 t0 = tex2D( ColorMap, FragIn.Uv0.xy );
    PixOut = t0 * FragIn.Color.xyzw;
    return PixOut;
}

float4 PSTexColor( Fragment FragIn ) : COLOR
{
 	return tex2D( ColorMap, FragIn.Uv0.xy );
 	//return float4( FragIn.Uv0.xy, 0.0f, 1.0f );
}
Fragment vs_texcolor_wrap( SimpleVertex VtxIn )
{
    Fragment FragOut;
    FragOut.ClipPos = mul( float4( VtxIn.Position, 1.0f ), MatMVP );
    FragOut.Color = float4(1.0f,0.0f,0.0f,1.0f);
    return FragOut;
}
float4 ps_texcolor_wrap( Fragment FragIn ) : COLOR
{
 	return float4( 1.0f, 1.0f, 0.0f, 1.0f );
 	//return float4( FragIn.Uv0.xy, 0.0f, 1.0f );
}

float4 PSTexColorRalp( Fragment FragIn ) : COLOR
{
 	float4 c = tex2D( ColorMap, FragIn.Uv0.xy );
	return float4(c.xyz,c.x);
}
float4 ps_knob( Fragment2Uv FragIn ) : COLOR
{
 	float4 c1 = tex2D( ColorMap, FragIn.Uv0.xy );
 	float4 c2 = tex2D( ColorMap2, FragIn.Uv0.xy );
	return float4(c1.xyz,c2.x);
}

float4 PSTexTexModColor( Fragment FragIn ) : COLOR
{
    float4 PixOut;
    // original modulated by (1.0f-(t1*fw))
    float4 t0 = tex2D( ColorMap, FragIn.Uv0.xy );			// previous frame
    float t1 = tex2D( ColorMap2, FragIn.Uv0.xy ).x;		// radial (white==more previous)
	t1 *= FragIn.Color.x;
    PixOut = float4( t0.xyz*t1, 1.0f );
    return PixOut;
}

///////////////////////////////////////////////////////////////////////////////

Fragment VSModColor( SimpleVertex VtxIn )
{
    Fragment FragOut;
    FragOut.ClipPos = mul( float4( VtxIn.Position, 1.0f ), MatMVP );
    FragOut.Color = modcolor;
    return FragOut;
}

Fragment VSVtxColor( ColorVertex VtxIn )
{
    Fragment FragOut;
    float2 outuv = mul( float4( VtxIn.Uv0.xy,0.0f,1.0f),MatAux).xy;
    FragOut.ClipPos = mul( float4( VtxIn.Position, 1.0f ), MatMVP );
    FragOut.Color = VtxIn.Color;
    FragOut.Uv0.x = outuv.x;
    FragOut.Uv0.y = -outuv.y;
    return FragOut;
}

Fragment VSTexMod( ColorVertex VtxIn )
{
    Fragment FragOut;
    
    float2 outuv = mul( float4( VtxIn.Uv0.xy,0.0f,1.0f),MatAux).xy;
    
    FragOut.ClipPos = mul( float4( VtxIn.Position, 1.0f ), MatMVP );
    FragOut.Uv0.x = outuv.x;
    FragOut.Uv0.y = 1.0f-outuv.y;
    FragOut.Color = VtxIn.Color*modcolor;
    return FragOut;
}
Fragment2Uv vs_knob( ColorVertex VtxIn )
{
    Fragment2Uv FragOut;
    
    float2 outuv = mul( float4( VtxIn.Uv0.xy,0.0f,1.0f),MatAux).xy;
    
    FragOut.ClipPos = mul( float4( VtxIn.Position, 1.0f ), MatMVP );
    FragOut.Uv0.x = outuv.x;
    FragOut.Uv0.y = -outuv.y;
    FragOut.Uv1.x = VtxIn.Uv0.x;
    FragOut.Uv1.y = -VtxIn.Uv0.y;
    FragOut.Color = VtxIn.Color*modcolor;
    return FragOut;
}

///////////////////////////////////////////////////////////////////////////////

technique vtxcolor
{
	pass p0
	{
		VertexShader = compile glslv VSVtxColor();
		PixelShader = compile glslf PSFragColor();
	}
}
technique vtxmodcolor
{
	pass p0
	{
		VertexShader = compile glslv VSModColor();
		PixelShader = compile glslf PSModColor();
	}
}
technique mmodcolor
{
	pass p0
	{
		VertexShader = compile glslv VSModColor();
		PixelShader = compile glslf PSModColor();
	}
}
technique texcolor
{
	pass p0
	{
		VertexShader = compile glslv VSTexMod();
		PixelShader = compile glslf PSTexColor();
	}
}
technique texcolorwrap
{
    pass p0
    {
        VertexProgram = compile glslv vs_texcolor_wrap();
        FragmentProgram = compile glslf ps_texcolor_wrap();
		//AddressU = Clamp;
		//AddressV = Clamp;
	}
};
technique texcolorralp
{
	pass p0
	{
		VertexShader = compile glslv VSTexMod();
		PixelShader = compile glslf PSTexColorRalp();
	}
}
technique knob
{
	pass p0
	{
		VertexShader = compile glslv vs_knob();
		PixelShader = compile glslf ps_knob();
	}
}
technique texmodcolor
{
	pass p0
	{
		VertexShader = compile glslv VSTexMod();
		PixelShader = compile glslf PSTexModColor();
	}
}
technique textexmodcolor
{
	pass p0
	{
		VertexShader = compile glslv VSTexMod();
		PixelShader = compile glslf PSTexTexModColor();
	}
}
technique texvtxcolor
{
	pass p0
	{
		VertexShader = compile glslv VSVtxColor();
		PixelShader = compile glslf PSTexVtxColor();
	}
}

technique texmodcolorFB
{
	pass p0
	{
		VertexShader = compile glslv VSTexMod();
		PixelShader = compile glslf PSTexModColorFB();
	}
}

technique distortedfeedback
{
    pass p0
    {
        //VertexShader = compile glslv vs_distorted_feedback();
        //PixelShader = compile glslf ps_distorted_feedback();
        VertexShader = compile glslv VSModColor();
        PixelShader = compile glslf PSModColor();
    }
}


