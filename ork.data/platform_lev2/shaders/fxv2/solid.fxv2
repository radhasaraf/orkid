///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default { glsl_version = "330"; }
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
uniform_set ublock_vtx {
  mat4 MatMVP;
  mat4 MatMV;
  mat4 MatM;
  vec4 modcolor;
  float Time;
}
uniform_set ublock_vtx_stereo {
  mat4 MatMVPL;
  mat4 MatMVPR;
}
///////////////////////////////////////////////////////////////
uniform_set ublock_frg {
  vec4 modcolor;
  int downsampledim;
  float downsampleamp;
  sampler2D ColorMap;
  sampler2D ColorMap2;
  sampler2D ColorMap3;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_vdefault {
  inputs {
    vec3 position : POSITION;
    vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
  }
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
  }
}
vertex_interface iface_vdefault_n {
  inputs {
    vec3 position : POSITION;
    vec4 vtxcolor : COLOR0;
    vec3 vtxnormal : NORMAL;
    vec2 uv0 : TEXCOORD0;
  }
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
  }
}
vertex_interface iface_vdefault_stereo : iface_vdefault {
  outputs {
    layout(secondary_view_offset=1) int gl_Layer;
  }
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fdefault : ublock_frg {
  inputs {
    vec4 frg_clr;
    vec2 frg_uv0;
  }
  outputs { layout(location = 0) vec4 out_clr; }
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fmt : ublock_frg {
  inputs { vec2 frg_uv0; }
  outputs { layout(location = 0) vec4 out_clr; }
}
///////////////////////////////////////////////////////////////
vertex_interface iface_vpick : ublock_vtx {
  inputs {
    vec4 position : POSITION;
    vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
  }
  //
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec4 frg_nrmd;
  }
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fpick : ublock_frg {
  inputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec4 frg_nrmd;
  }
  outputs {
    layout(location = 0) vec4 out_clr;
    layout(location = 1) vec4 out_nrmd;
  }
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default : default {
  DepthTest = LEQUALS;
  DepthMask = ON;
}
///////////////////////////////////////////////////////////////
state_block sb_lerpblend : sb_default { BlendMode = ALPHA; }
///////////////////////////////////////////////////////////////
state_block sb_additive : sb_default { BlendMode = ADDITIVE; }
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
fragment_shader ps_texcolor : iface_fmt {
  vec4 texc = texture(ColorMap, frg_uv0);
  out_clr   = vec4(texc.xyz, 1);
}
fragment_shader ps_texcolor4 : iface_fmt {
  vec4 texc = texture(ColorMap, frg_uv0);
  out_clr   = texc;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_blit : iface_fmt {
  vec3 texc = texture(ColorMap, frg_uv0.xy).xyz;
  out_clr = vec4(texc,1);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_downsample2x2 : iface_fmt {
  const float kscale = 1.0/4.0;
  vec2 uvb = gl_FragCoord.xy*2-vec2(0.5,0.5);
  vec3 outc = vec3(0);
  for(int iy=0; iy<2; iy++){
    for(int ix=0; ix<2; ix++){
    vec2 uvx = uvb+vec2(ix,iy);
    vec3 texc = texelFetch(ColorMap, ivec2(uvx), 0).xyz;
    outc += texc;
    }
  }
  out_clr = vec4(outc*kscale,1);
}
fragment_shader ps_downsample3x3 : iface_fmt {
  const float kscale = 1.0/9.0;
  vec2 uvb = gl_FragCoord.xy*3-vec2(0.5,0.5);
  vec3 outc = vec3(0);
  for(int iy=0; iy<3; iy++){
    for(int ix=0; ix<3; ix++){
    vec2 uvx = uvb+vec2(ix,iy);
    vec3 texc = texelFetch(ColorMap, ivec2(uvx), 0).xyz;
    outc += texc;
    }
  }
  out_clr = vec4(outc*kscale,1);
}
fragment_shader ps_downsample4x4 : iface_fmt {
  const float kscale = 1.0/16.0;
  vec2 uvb = gl_FragCoord.xy*4-vec2(0.5,0.5);
  vec3 outc = vec3(0);
  for(int iy=0; iy<4; iy++){
    for(int ix=0; ix<4; ix++){
    vec2 uvx = uvb+vec2(ix,iy);
    vec3 texc = texelFetch(ColorMap, ivec2(uvx), 0).xyz;
    outc += texc;
    }
  }
  out_clr = vec4(outc*kscale,1);
}
fragment_shader ps_downsample5x5 : iface_fmt {
  const float kscale = 1.0/25.0;
  vec2 uvb = gl_FragCoord.xy*5+vec2(2,2);
  vec3 outc = vec3(0);
  float tot_w = 0.0;
  for(int iy=-2; iy<=2; iy++){
    for(int ix=-2; ix<=2; ix++){
    vec2 uvx = uvb+vec2(ix,iy);
    float w_x = abs(ix);
    float w_y = abs(iy);
    float w = 1; //w_x*w_y;
    tot_w += w;
    vec3 texc = texelFetch(ColorMap, ivec2(uvx), 0).xyz*w;
    outc += texc;
    }
  }
  out_clr = vec4(outc/tot_w,1);
}
fragment_shader ps_downsample6x6 : iface_fmt {
  const float kscale = 1.0/36.0;
  vec2 uvb = gl_FragCoord.xy*6-vec2(0.5,0.5);
  vec3 outc = vec3(0);
  for(int iy=0; iy<6; iy++){
    for(int ix=0; ix<6; ix++){
    vec2 uvx = uvb+vec2(ix,iy);
    vec3 texc = texelFetch(ColorMap, ivec2(uvx), 0).xyz;
    outc += texc;
    }
  }
  out_clr = vec4(outc*kscale,1);
}
fragment_shader ps_downsample7x7 : iface_fmt {
  vec2 uvb = gl_FragCoord.xy*7+vec2(3,3);
  vec3 outc = vec3(0);
  float tot_w = 0.0;
  for(int iy=-3; iy<=3; iy++){
    for(int ix=-3; ix<=3; ix++){
    vec2 uvx = uvb+vec2(ix,iy);
    float w_x = abs(ix);
    float w_y = abs(iy);
    float w = 1; //w_x*w_y;
    tot_w += w;
    vec3 texc = texelFetch(ColorMap, ivec2(uvx), 0).xyz*w;
    outc += texc;
    }
  }
  out_clr = vec4(outc/tot_w,1);
}
///////////////////////////////////////////////////////////////
vertex_shader vs_vtxcolor : iface_vdefault : ublock_vtx {
  gl_Position = MatMVP * vec4(position,1);
  frg_clr     = vtxcolor;
  frg_uv0     = uv0;
}
vertex_shader vs_debuguv : iface_vdefault : ublock_vtx {
  gl_Position = MatMVP * vec4(position,1);
  frg_clr     = vec4(uv0,0,1);
  frg_uv0     = uv0;
}
vertex_shader vs_wldnormal : iface_vdefault_n : ublock_vtx {
  gl_Position = MatMVP * vec4(position,1);
  vec3 n = vtxnormal + vec3(1,1,1);
  frg_clr     = vec4(n*0.5,1);
  frg_uv0     = uv0;
}
vertex_shader vs_objnormal : iface_vdefault_n : ublock_vtx {
  gl_Position = MatMVP * vec4(position,1);

  vec3 n = vtxnormal + vec3(1,1,1);
  frg_clr     = vec4(n*0.5,1);
  frg_uv0     = uv0;
}

///////////////////////////////////////////////////////////////
vertex_shader vs_vtxcolor_stereo
  : extension(GL_NV_stereo_view_rendering)
  : extension(GL_NV_viewport_array2)
  : iface_vdefault_stereo
  : ublock_vtx_stereo {
  gl_Position = MatMVPL * vec4(position,1);
  gl_SecondaryPositionNV = MatMVPR * vec4(position,1);
  gl_Layer = 0;
  gl_ViewportMask[0] = 1;
  gl_SecondaryViewportMaskNV[0] = 2;
  frg_clr     = vtxcolor;
  frg_uv0     = uv0;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_texvtxcolor : iface_fdefault {
  vec4 texc = texture(ColorMap, frg_uv0);
  out_clr   = vec4(texc.xyz * frg_clr.xyz, texc.r);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_texvtxcolor_noalpha : iface_fdefault {
  vec4 texc = texture(ColorMap, frg_uv0);
  out_clr   = vec4(texc.xyz * frg_clr.xyz, 1.0);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_distortedfeedback : iface_fdefault {
  // vec2 uvl = texture( ColorMap2, frg_uv0 ).xy;
  vec4 texc = texture(ColorMap, frg_uv0);
  out_clr   = vec4(texc.xyz * frg_clr.xyz, texc.r);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_feedbackatten : iface_fdefault {
  vec4 texc = texture(ColorMap, frg_uv0);
  out_clr   = vec4(0, 0, 0, frg_clr.w);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_fragclr : iface_fdefault {
  out_clr = frg_clr;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_modclr : iface_fmt { out_clr = modcolor; }
///////////////////////////////////////////////////////////////
// pick
///////////////////////////////////////////////////////////////
vertex_shader vs_pick : iface_vpick {
  gl_Position = MatMVP * position;
  vec4 cpos   = MatMV * position;
  vec3 wnorm  = normalize(vec3(0, 1, 0));
  frg_clr     = vtxcolor;
  frg_uv0     = uv0;
  frg_nrmd    = vec4(wnorm, -cpos.z);
}
fragment_shader ps_pick : iface_fpick {
  out_clr  = modcolor;
  out_nrmd = frg_nrmd;
}
///////////////////////////////////////////////////////////////
technique vtxcolor {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_fragclr;
    state_block     = sb_default;
  }
}
technique debuguv {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_debuguv;
    fragment_shader = ps_fragclr;
    state_block     = sb_default;
  }
}
technique vtxmodcolor {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_fragclr;
    state_block     = sb_default;
  }
}
technique mmodcolor {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_modclr;
    state_block     = sb_default;
  }
}
technique texcolor {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_texcolor;
    state_block     = sb_default;
  }
}
technique tek_objnormal {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_objnormal;
    fragment_shader = ps_fragclr;
    state_block     = sb_default;
  }
}
technique tek_wldnormal {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_wldnormal;
    fragment_shader = ps_fragclr;
    state_block     = sb_default;
  }
}
technique texcolor4 {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_texcolor4;
    state_block     = sb_default;
  }
}
technique blit {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_blit;
    state_block     = sb_default;
  }
}
technique downsample_2x2 {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_downsample2x2;
    state_block     = sb_default;
  }
}
technique downsample_3x3 {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_downsample3x3;
    state_block     = sb_default;
  }
}
technique downsample_4x4 {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_downsample4x4;
    state_block     = sb_default;
  }
}
technique downsample_5x5 {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_downsample5x5;
    state_block     = sb_default;
  }
}
technique downsample_6x6 {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_downsample6x6;
    state_block     = sb_default;
  }
}
technique downsample_7x7 {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_downsample7x7;
    state_block     = sb_default;
  }
}
technique texcolorstereo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor_stereo;
    fragment_shader = ps_texcolor;
    state_block     = sb_default;
  }
}
technique tek_pick {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_pick;
    fragment_shader = ps_pick;
    state_block     = sb_default;
  }
}
technique distortedfeedback {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_distortedfeedback;
    state_block     = sb_default;
  }
}
technique feedbackatten {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_feedbackatten;
    state_block     = sb_default;
  }
}

technique texvtxcolor {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_texvtxcolor;
    state_block     = sb_default;
  }
}
technique texvtxcolor_noalpha {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_texvtxcolor_noalpha;
    state_block     = sb_default;
  }
}
technique texcolorwrap {}
technique texcolorralp {}
technique knob {}
technique texmodcolor {}
technique textexmodcolor {}
technique texmodcolorFB {}
///////////////////////////////////////////////////////////////
