///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default { glsl_version = "150"; }
///////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////
uniform_set ub_vtx { mat4 MatMVP; }
vertex_interface iface_vdefault : ub_vtx {
  inputs {
    vec4 position : POSITION;
    vec4 vtxcolor : COLOR0;
    vec2 uv0 : TEXCOORD0;
    vec2 uv1 : TEXCOORD1;
  }
  outputs {
    vec4 frg_clr;
    vec2 frg_uv;
  }
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fdefault {
  inputs {
    vec4 frg_clr;
    vec2 frg_uv;
  }
  outputs { vec4 out_clr; }
}
///////////////////////////////////////////////////////////////
uniform_set ub_frg {
  vec4 BiasA;
  vec4 BiasB;
  vec4 BiasC;
  vec4 LevelA;
  vec4 LevelB;
  vec4 LevelC;
  vec4 ModColor;
}
sampler_set ub_frg_samplers (descriptor_set 0) {
  sampler2D ColorMap;
  sampler2D MapA;
  sampler2D MapB;
  sampler2D MapC;
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fmt : ub_frg : ub_frg_samplers {
  inputs { vec2 frg_uv; }
  outputs { vec4 out_clr; }
}
///////////////////////////////////////////////////////////////
// StateBlocks
///////////////////////////////////////////////////////////////
state_block sb_default : default {
  DepthTest = OFF;
  CullTest  = OFF;
}
///////////////////////////////////////////////////////////////
state_block sb_lerpblend : sb_default {
  BlendMode = ALPHA;
  CullTest  = OFF;
}
///////////////////////////////////////////////////////////////
state_block sb_additive : sb_default {
  BlendMode = ADDITIVE;
  CullTest  = OFF;
}
///////////////////////////////////////////////////////////////
// shaders
///////////////////////////////////////////////////////////////
vertex_shader vs_uitext : iface_vdefault {
  gl_Position = MatMVP * position;
  frg_clr     = vtxcolor;
  frg_uv      = uv0;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_uitext : iface_fmt {
  vec4 texc = texture(ColorMap, frg_uv);
  //if (texc.r == 0.0)
    //discard;
  out_clr = vec4(texc.xyz * ModColor.xyz, texc.r);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_uitextured : iface_fmt {
  vec4 texc = texture(ColorMap, frg_uv);
  out_clr   = vec4(texc.xyz, texc.w);
}
///////////////////////////////////////////////////////////////
libblock comp_tools {
  float max4(vec4 inp) { return max(inp.w, max(inp.z, max(inp.x, inp.y))); }
}
///////////////////////////////////////////////////////////////
fragment_shader ps_aplusbplusc : iface_fmt {
  vec4 texa = texture(MapA, frg_uv);
  vec4 texb = texture(MapB, frg_uv);
  vec4 texc = texture(MapC, frg_uv);
  out_clr   = (BiasA + texa * LevelA) + (BiasB + texb * LevelB) + (BiasC + texc * LevelC);
}
fragment_shader ps_boveraplusc : iface_fmt : comp_tools {
  vec4 texa = texture(MapA, frg_uv);
  vec4 texb = texture(MapB, frg_uv);
  vec4 texc = texture(MapC, frg_uv);
  float fl  = max4(texb);
  out_clr   = mix(texa, texb, fl) + texc;
}
fragment_shader ps_alerpbwithc : iface_fmt : comp_tools {
  vec4 texa = texture(MapA, frg_uv);
  vec4 texb = texture(MapB, frg_uv);
  vec4 texc = texture(MapC, frg_uv);
  float fl  = max4(texc);
  out_clr   = mix(texa, texb, texc);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_soloa : iface_fmt {
  vec4 texc = texture(MapA, frg_uv);
  out_clr   = BiasA + LevelA * vec4(texc.xyz, texc.w);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_solob : iface_fmt {
  vec4 texc = texture(MapB, frg_uv);
  out_clr   = BiasB + LevelB * vec4(texc.xyz, texc.w);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_soloc : iface_fmt {
  vec4 texc = texture(MapC, frg_uv);
  out_clr   = vec4(texc.xyz, texc.w);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_op2amulb : iface_fmt {
  vec4 texa = texture(MapA, frg_uv);
  vec4 texb = texture(MapB, frg_uv);
  out_clr   = (BiasA + LevelA * texa) * (BiasB + LevelB * texb);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_op2adivb : iface_fmt {
  vec4 texa = texture(MapA, frg_uv);
  vec4 texb = texture(MapB, frg_uv);
  out_clr   = (BiasA + LevelA * texa) / (BiasB + LevelB * texb);
}
///////////////////////////////////////////////////////////////
vertex_shader vs_vtxcolor : iface_vdefault {
  gl_Position = MatMVP * position;
  frg_clr     = vtxcolor;
  frg_uv      = uv0;
}
///////////////////////////////////////////////////////////////
fragment_shader ps_fragclr : iface_fdefault {
  out_clr = frg_clr;
  // out_clr = vec4(1.0,0.0,1.0,1.0);
}
///////////////////////////////////////////////////////////////
fragment_shader ps_modclr : iface_fmt { out_clr = ModColor; }
///////////////////////////////////////////////////////////////
technique Op2AmulB {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_op2amulb;
    state_block     = sb_default;
  }
}
technique Op2AdivB {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_op2adivb;
    state_block     = sb_default;
  }
}
///////////////////////////////////////////////////////////////
technique BoverAplusC {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_boveraplusc;
    state_block     = sb_default;
  }
}
technique AplusBplusC {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_aplusbplusc;
    state_block     = sb_default;
  }
}
technique AlerpBwithC {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_alerpbwithc;
    state_block     = sb_default;
  }
}
technique Asolo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_soloa;
    state_block     = sb_default;
  }
}
technique Bsolo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_solob;
    state_block     = sb_default;
  }
}
technique Csolo {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_vtxcolor;
    fragment_shader = ps_soloc;
    state_block     = sb_default;
  }
}
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
vertex_interface iface_v_onrtgd : ub_vtx {
  inputs {
    vec4 position : POSITION;
    vec2 uv0 : TEXCOORD0;
  }
  //
  outputs {
    vec2 frg_uv0;
  }
}
fragment_interface iface_f_onrtgd : ub_frg {
  inputs {
    vec2 frg_uv0;
    vec4 frg_nrmd;
  }
  outputs {
    layout(location = 0) vec4 out_clr;
    layout(location = 1) vec4 out_nrmd;
  }
}
vertex_shader vs_onrtgd : iface_v_onrtgd {
  gl_Position = MatMVP * position;
  frg_uv0     = uv0;
}
fragment_shader ps_onrtgd : iface_f_onrtgd {
  out_clr   = texture(MapA, frg_uv0);
  out_nrmd   = texture(MapB, frg_uv0);
}
technique OutputNodeRtGroupDual {
  fxconfig = fxcfg_default;
  pass p0 {
    vertex_shader   = vs_onrtgd;
    fragment_shader = ps_onrtgd;
    state_block     = sb_default;
  }
}
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
