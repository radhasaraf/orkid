import "orkshader://particle_geo_common.i2";
///////////////////////////////////////////////////////////////

typeblock types_billboardGEO{
  struct Input {
    vec2 inp_ang_siz;
    vec3 inp_pos;
  };
  struct Output {
    vec4 pos0;
    vec4 pos1;
    vec4 pos2;
    vec4 pos3;
  };

}

///////////////////////////////////////////////////////////////

geometry_interface gface_billGEO
    //: vface_bill // import vtxshader outputs
    : ublk_vtx : gface_baseGEO {
  inputs {
    vec4 geo_clr;
    vec2 geo_uv0;
    vec2 geo_uv1;
  }
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec2 frg_uv1;
  }
}

///////////////////////////////////////////////////////////////

geometry_interface gface_bill_stereoGEO // 
  //: vface_bill // import vtxshader outputs
  : gface_baseGEO   //
  { // import vtxshader outputs
  
  inputs {
    vec4 geo_clr;
    vec2 geo_uv0;
    vec2 geo_uv1;
  }

  // TODO recursive walk up inheritance tree for attribute out->in inheritance
  outputs {
    vec4 frg_clr;
    vec2 frg_uv0;
    vec2 frg_uv1;
    layout(secondary_view_offset = 1) int gl_Layer;
  }
}

///////////////////////////////////////////////////////////////

libblock lib_billboardGEO 
  : types_billboardGEO
  : ublk_vtx {

  Output Compute(Input inp) {
 
    Output outp;

  
    float ang         = inp.inp_ang_siz.x;
    float size_pixels = inp.inp_ang_siz.y;

    float sizX = size_pixels * Rtg_InvDim.x;
    float sizY = size_pixels * Rtg_InvDim.y;

    vec4 wpos = MatM * vec4(inp.inp_pos, 1);
    vec4 hpos = MatVP * wpos;
    vec4 dpos = hpos / hpos.w;

    vec3 p0 = dpos.xyz + vec3(-sizX, -sizY, 0);
    vec3 p1 = dpos.xyz + vec3(+sizX, -sizY, 0);
    vec3 p2 = dpos.xyz + vec3(+sizX, +sizY, 0);
    vec3 p3 = dpos.xyz + vec3(-sizX, +sizY, 0);


    outp.pos0 = vec4(p0, 1.0);
    outp.pos1 = vec4(p1, 1.0);
    outp.pos2 = vec4(p2, 1.0);
    outp.pos3 = vec4(p3, 1.0);

    return outp;
  }
}

///////////////////////////////////////////////////////////////

geometry_shader gs_billboardquadGEO //
    : lib_billboardGEO              //
    : gface_billGEO {               //
  Input inp;
  inp.inp_ang_siz = geo_uv0[0];
  inp.inp_pos     = gl_in[0].gl_Position.xyz;
  Output outp     = Compute(inp);
  frg_uv1     = geo_uv1[0];
  frg_clr     = geo_clr[0];
  //////////////////////////
  gl_Position     = outp.pos0;
  frg_uv0     = vec2(0,0);
  EmitVertex();
  gl_Position = outp.pos1;
  frg_uv0     = vec2(1,0);
  EmitVertex();
  gl_Position = outp.pos3;
  frg_uv0     = vec2(0,1);
  EmitVertex();
  gl_Position = outp.pos2;
  frg_uv0     = vec2(1,1);
  EmitVertex();
  //////////////////////////
  EndPrimitive();
}

///////////////////////////////////////////////////////////////

geometry_shader gs_billboardquad_stereoGEO      //
    : gface_bill_stereoGEO                      //
    : extension(GL_NV_stereo_view_rendering) //
    : extension(GL_NV_viewport_array2)       //
    : lib_billboardGEO {                        //
  gl_Layer                      = 0;
  gl_ViewportMask[0]            = 1;
  gl_SecondaryViewportMaskNV[0] = 2;
  /*Input inp;
  //inp.inp_clr            = geo_clr[0];
  inp.inp_ang_siz        = geo_uv0;
  //inp.inp_uv1            = geo_uv1;
  inp.inp_pos            = gl_in[0].gl_Position.xyz;
  Output outpL           = Compute(inp, MatMVPL);
  Output outpR           = Compute(inp, MatMVPR);
  gl_Position            = outpL.pos0;
  gl_SecondaryPositionNV = outpR.pos0;
  frg_uv0                = outpL.uv0;
  EmitVertex();
  gl_Position            = outpL.pos1;
  gl_SecondaryPositionNV = outpR.pos1;
  frg_uv0                = outpL.uv1;
  EmitVertex();
  gl_Position            = outpL.pos3;
  gl_SecondaryPositionNV = outpR.pos3;
  frg_uv0                = outpL.uv3;
  EmitVertex();
  gl_Position            = outpL.pos2;
  gl_SecondaryPositionNV = outpR.pos2;
  frg_uv0                = outpL.uv2;
  EmitVertex();
  EndPrimitive();*/
}

///////////////////////////////////////////////////////////////

vertex_shader vs_vtxtexcolorGEO : vface_bill {
  gl_Position = position;
  geo_clr  = vtxcolor.rgba;
  geo_uv0  = uv0;
  geo_uv1  = uv1;
}

///////////////////////////////////////////////////////////////

vertex_shader vs_vtxcolorGEO : vface_bill {
  gl_Position = position;
  geo_clr  = vtxcolor;
  geo_uv0  = uv0;
  geo_uv1  = uv1;
}

///////////////////////////////////////////////////////////////

geometry_shader gs_identity : gface_billGEO {
  for (int n = 0; n < gl_in.length(); n++) {
    gl_Position = gl_in[n].gl_Position;
    frg_clr     = geo_clr[n];
    frg_uv0     = geo_uv0[n];
    frg_uv1     = geo_uv1[n];
    EmitVertex();
  }
  EndPrimitive();
}
