///////////////////////////////////////////////////////////////
// FxConfigs
///////////////////////////////////////////////////////////////
fxconfig fxcfg_default {
	glsl_version = "130";
}
///////////////////////////////////////////////////////////////
state_block sb_ui : default {
	DepthTest=OFF;
	DepthMask=true;
	CullTest=OFF;
	BlendMode = OFF;
}
///////////////////////////////////////////////////////////////
uniform_set ub_ui {
  //uvec4 objid;
  vec4 modcolor;
  mat4 mvp;
  sampler2D InstanceMatrices;
  sampler2D ColorMap;
  usampler2D InstanceIds;
  float time;
}
///////////////////////////////////////////////////////////////
vertex_interface iface_vui : ub_ui {
  inputs {
    vec4 position : POSITION;
    vec4 vtxtexc : TEXCOORD0;
    vec4 vtxcolor : COLOR0;
  }
  //
  outputs {
    vec4 frg_clr;
	vec4 frg_texc;
  }
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fui : ub_ui {
  inputs {
    vec4 frg_clr;
	vec4 frg_texc;
  }
  outputs {
    layout(location = 0) vec4 out_color;
  }
}
///////////////////////////////////////////////////////////////
fragment_interface iface_fpick : ub_ui {
  inputs {
    vec4 frg_clr;
  }
  outputs {
    layout(location = 0) uvec4 out_iid;
    layout(location = 1) vec4 out_nrmd;
  }
}
///////////////////////////////////////////////////////////////
vertex_shader vs_ui
	: iface_vui {
		gl_Position = mvp*position;
    frg_clr = modcolor;
}
///////////////////////////////////////////////////////////////
vertex_shader vs_vtxcolor
	: iface_vui {
	gl_Position = mvp*position;
    frg_clr = vtxcolor;
	frg_texc = vtxtexc;
}
///////////////////////////////////////////////////////////////
fragment_shader fs_vtxpick
	: iface_fpick {
		//out_iid = uvec4(0x1234,0x5678,0,0xabcd); // comes back as 0xabcd000056781234
		out_iid = uvec4(frg_clr);
    out_nrmd = vec4(0,1,0,0);
}
///////////////////////////////////////////////////////////////
fragment_shader fs_frgcolor
	: iface_fui {
	out_color = frg_clr;
}
///////////////////////////////////////////////////////////////
fragment_shader fs_ui_tex
	: iface_fui {
	ivec2 iuv = ivec2( int(frg_texc.x), int(frg_texc.y) );
	out_color = texelFetch(ColorMap,iuv,0);
	out_color *= frg_clr;
}
///////////////////////////////////////////////////////////////
libblock lb_lines{
	float line(float value, float width, float antialias) {
	    float halfWidth = width * 0.5;
    	float distanceFromCenter = abs(value - round(value));
    	float line = smoothstep(halfWidth - antialias, halfWidth, distanceFromCenter);
    	return 1.0 - line;
	}
}
///////////////////////////////////////////////////////////////
fragment_shader fs_colorwheel
	: iface_fui
	: lb_lines {

    float angle = radians(time); // Angle in degrees
	float lineWidth = 2.0; // Line width in pixels
    float antialias = 2.0; // Antialiasing width in pixels
   	float gridSize = 24.0; // Grid size in pixels

	// Rotate the grid
    float sinAngle = sin(angle);
    float cosAngle = cos(angle);
    mat2 rotationMatrix = mat2(cosAngle, -sinAngle, sinAngle, cosAngle);

    vec2 uv = gl_FragCoord.xy;
	uv = uv * rotationMatrix;

	// Create grid lines
    vec2 grid = vec2(line(uv.x / gridSize, lineWidth, antialias), line(uv.y / gridSize, lineWidth, antialias));

    float combinedLines = min(grid.x, grid.y);
	combinedLines = 4.0*pow(combinedLines,2.0);

	vec3 BG = vec3(combinedLines);
	vec3 FG = frg_clr.xyz;
    out_color = vec4(mix(BG,FG,pow(frg_clr.w,.5)),1); 
}
///////////////////////////////////////////////////////////////
fragment_shader fs_gradwalpha
	: iface_fui {
    out_color = frg_clr.xyzw; 
}
///////////////////////////////////////////////////////////////
fragment_shader fs_picking
	: iface_fpick {
		//out_iid = uvec4(0x1234,0x5678,0,0xabcd); // comes back as 0xabcd000056781234
		//out_iid = objid;
    out_nrmd = vec4(0,1,0,0);
}
///////////////////////////////////////////////////////////////
technique ui_modcolor {
	fxconfig=fxcfg_default;
	pass p0 {
    vertex_shader=vs_ui;
		fragment_shader=fs_frgcolor;
		state_block=sb_ui;
	}
}
///////////////////////////////////////////////////////////////
technique ui_vtxcolor {
	fxconfig=fxcfg_default;
	pass p0 {
        vertex_shader=vs_vtxcolor;
	    fragment_shader=fs_frgcolor;
		state_block=sb_ui;
	}
}
///////////////////////////////////////////////////////////////
technique ui_texcolor {
	fxconfig=fxcfg_default;
	pass p0 {
        vertex_shader=vs_vtxcolor;
	    fragment_shader=fs_ui_tex;
		state_block=sb_ui;
	}
}
///////////////////////////////////////////////////////////////
technique ui_colorwheel {
	fxconfig=fxcfg_default;
	pass p0 {
        vertex_shader=vs_vtxcolor;
	    fragment_shader=fs_colorwheel;
		state_block=sb_ui;
	}
}
///////////////////////////////////////////////////////////////
technique ui_gradwalpha {
	fxconfig=fxcfg_default;
	pass p0 {
        vertex_shader=vs_vtxcolor;
	    fragment_shader=fs_gradwalpha;
		state_block=sb_ui;
	}
}
///////////////////////////////////////////////////////////////
technique ui_vtxpicking {
	fxconfig=fxcfg_default;
	pass p0 {
    vertex_shader=vs_vtxcolor;
		fragment_shader=fs_vtxpick;
		state_block=sb_ui;
	}
}
///////////////////////////////////////////////////////////////
technique ui_picking {
	fxconfig=fxcfg_default;
	pass p0 {
    vertex_shader=vs_ui;
		fragment_shader=fs_picking;
		state_block=sb_ui;
	}
}
