//#include "tanspace.fxi"
///////////////////////////////////////////////////////////////////////////////

struct MrtPickPixel
{
	float4	Color		: COLOR0;
	float4	DN			: COLOR1;
};

///////////////////////////////////////////////////////////////////////////////

struct PickVertex
{
	float4 Position : POSITION;
	float3 Normal : NORMAL;
};

struct SkinnedPickVertex
{
    float4 Position     : POSITION;
    float3 Normal       : NORMAL;
    int4   BoneIndices	: BLENDINDICES;
    float4 BoneWeights	: BLENDWEIGHT;
};

///////////////////////////////////////////////////////////////////////////////

struct frag_pick {

    float4 ClipPos : POSITION;  // in clip space
    float4 UserPos : TEXCOORD0;
    float3 Normal : TEXCOORD1;  // in world space
};

///////////////////////////////////////////////////////////////////////////////

frag_pick vs_skinned_pick( SkinnedPickVertex VtxIn )
{
    frag_pick FragOut;
    
	float3 ObjectPos = SkinPosition( VtxIn.BoneIndices, VtxIn.BoneWeights, VtxIn.Position );
	float3 ObjectNormal = SkinNormal( VtxIn.BoneIndices, VtxIn.BoneWeights, VtxIn.Normal );
    
	float4 Normal = float4( ObjectNormal, 0.0f );
    
    FragOut.ClipPos = mul( float4(ObjectPos,1.0f), WorldViewProjection );
    FragOut.Normal = normalize( mul( float4(ObjectNormal,0.0f), World ) );
    FragOut.UserPos = mul( float4(ObjectPos,1.0f), WorldViewProjection );      
    return FragOut;
}

///////////////////////////////////////////////////////////////////////////////

frag_pick vs_pick( PickVertex VtxIn )
{
    frag_pick FragOut;
    
	float4 Normal = float4( VtxIn.Normal, 0.0f );
    
    FragOut.ClipPos = mul( VtxIn.Position, WorldViewProjection );
    FragOut.Normal = normalize( mul( VtxIn.Normal, World ) );
    FragOut.UserPos = mul( VtxIn.Position, WorldViewProjection );      
    FragOut.UserPos.xyz /= FragOut.UserPos.w;
    return FragOut;
}

///////////////////////////////////////////////////////////////////////////////

MrtPickPixel ps_pick( frag_pick FragIn ) 
{
    MrtPickPixel PixOut;
    PixOut.Color = ModColor;
    float3 Normal = normalize( FragIn.Normal );
    PixOut.DN = float4( Normal.xy, FragIn.UserPos.z, Normal.z );
    return PixOut;
}

///////////////////////////////////////////////////////////////////////////////

technique pick
{
    pass p0
    {
        VertexShader = compile vs_3_0 vs_pick();
        PixelShader = compile ps_3_0 ps_pick();


        //CullMode = CW; // NONE CW CCW
        //AlphaBlendEnable = FALSE;
        //CullMode = CCW; 
		//AlphaBlendEnable = false;
	}
};

technique skinned_pick
{
    pass p0
    {
        VertexShader = compile vs_3_0 vs_skinned_pick();
        PixelShader = compile ps_3_0 ps_pick();


       // CullMode = CW; // NONE CW CCW
       // AlphaBlendEnable = FALSE;

        //CullMode = CCW; 
		//AlphaBlendEnable = false;
	}
};

///////////////////////////////////////////////////////////////////////////////
