///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

uniform float3x3 WorldRot3 : WorldRot3;
uniform float4x4 World : World;
uniform float4x4 View : View;
uniform float4x4 WorldInverse : WorldInverse;
uniform float4x4 WorldViewProjection : WorldViewProjection;
uniform float4x4 WorldView : WorldView;
uniform float4x4 ViewProjection : ViewProjection;
uniform float4x4 ViewInverseTranspose : ViewInverseTranspose;
uniform float4x4 WorldInverseTranspose : WorldInverseTranspose;
uniform float4x4 WorldViewInverseTranspose : WorldViewInverseTranspose;

uniform float4x4 BoneMatrices[32] : BoneMatrices;

///////////////////////////////////////////////////////////////////////////////

struct TanLytData
{
	float3 ObjLyt;
	float3 ObjEye;
	float3 ObjHalf;

	float3 TanLyt;
	float3 TanEye;
	float3 TanHalf;
};

struct MrtPixel
{
	float4	DiffuseBuffer		: COLOR0;	
	float4	SpecularBuffer		: COLOR1;	
	float4	NormalDepthBuffer	: COLOR2;	
};

//float3 GetEyePos()
//{
//	return float3( ViewInverseTranspose[0].w, ViewInverseTranspose[1].w, ViewInverseTranspose[2].w );
//}
float3 GetEyePos()
{
	return transpose( ViewInverseTranspose )[3].xyz;
}

///////////////////////////////////////////////////////////////////////////////

float2 TransformUv( float2 InUv, float3 XfMatA, float3 XfMatB )
{
	float2 rval;
	rval.x = dot( float3( InUv, 1.0f ), XfMatA );
	rval.y = -dot( float3( InUv, 1.0f ), XfMatB );
	return rval;
}

///////////////////////////////////////////////////////////////////////////////

float3x3 Inverse3x3( float3x3 M )
{
	float det = dot( cross( M[0], M[1] ), M[2] );
	float3x3 T = transpose( M );
	return float3x3( cross( T[1], T[2] ), cross( T[2], T[0] ), cross( T[0], T[1] ) );
}

///////////////////////////////////////////////////////////////////////////////

float3x3 ComputeTangentFrame( float3 N, float3 P, float2 UV )
{
	float3 dp1 = ddx(P);
	float3 dp2 = ddy(P);
	float2 duv1 = ddx(UV);
	float2 duv2 = ddy(UV);
	float3x3 M = float3x3( dp1, dp2, cross(dp1,dp2) );
	float3x3 IM = Inverse3x3(M);
	float3 T = mul( IM, float3( duv1.x, duv2.x, 0.0f ) );
	float3 B = mul( IM, float3( duv1.y, duv2.y, 0.0f ) );
	float maxlen = max( length(T), length(B) );
	return float3x3( normalize(T/maxlen), normalize(B/maxlen), normalize(N) );
}

///////////////////////////////////////////////////////////////////////////////

TanLytData GenTanLytData( float4x4 WorldMat, float3 wToLight, float3 wToEye, float3 Normal, float3 Binormal, float3 Tangent )
{
	TanLytData data;
	float3 wToHalf			= wToEye;
	float3x3 MatTanToObj	= float3x3( Tangent, Binormal, Normal );
	data.ObjLyt				= normalize(mul( WorldRot3, wToLight ));
	data.ObjHalf			= normalize(mul( WorldRot3, wToHalf ));
	data.ObjEye				= normalize(mul( WorldRot3, wToEye ));
	data.TanHalf			= ( mul( MatTanToObj, data.ObjHalf ) );
	data.TanEye				= ( mul( MatTanToObj, data.ObjEye ) );
	data.TanLyt				= ( mul( MatTanToObj, data.ObjLyt ) );
	return data;
}

///////////////////////////////////////////////////////////////////////////////

float3 SkinPosition( int4 BoneIndices, float4 BoneWeights, float3 InPos )
{
	float4 Pos4 = float4( InPos, 1.0f );
	const float kfw = 0.00390625f; // (1/256.0f);

	float3 WeightedVertex =  (mul(Pos4,BoneMatrices[BoneIndices.x])*BoneWeights.x).xyz;
	       //WeightedVertex += (mul(Pos4,BoneMatrices[BoneIndices.y])*BoneWeights.y).xyz;
	       //WeightedVertex += (mul(Pos4,BoneMatrices[BoneIndices.z])*BoneWeights.z).xyz;
	       //WeightedVertex += (mul(Pos4,BoneMatrices[BoneIndices.w])*BoneWeights.w).xyz;
 
	return WeightedVertex*kfw;
}

///////////////////////////////////////////////////////////////////////////////

float3 SkinNormal( int4 BoneIndices, float4 BoneWeights, float3 InNrm )
{
	float4 Nrm4 = float4( InNrm, 0.0f );

	float3 WeightedNormal =  (mul(Nrm4,BoneMatrices[BoneIndices.x])*BoneWeights.x).xyz;
	       //WeightedNormal += (mul(Nrm4,BoneMatrices[BoneIndices.y])*BoneWeights.y).xyz;
	       //WeightedNormal += (mul(Nrm4,BoneMatrices[BoneIndices.z])*BoneWeights.z).xyz;
	       //WeightedNormal += (mul(Nrm4,BoneMatrices[BoneIndices.w])*BoneWeights.w).xyz;

	return normalize(WeightedNormal.xyz);
}

///////////////////////////////////////////////////////////////////////////////

float3 SkinPosition4( int4 BoneIndices, float4 BoneWeights, float3 InPos )
{
	float4 Pos4 = float4( InPos, 1.0f );
	const float kfw = 0.00390625f; // (1/256.0f);

	float3 WeightedVertex =  (mul(Pos4,BoneMatrices[BoneIndices.x])*BoneWeights.x).xyz;
	       WeightedVertex += (mul(Pos4,BoneMatrices[BoneIndices.y])*BoneWeights.y).xyz;
	       WeightedVertex += (mul(Pos4,BoneMatrices[BoneIndices.z])*BoneWeights.z).xyz;
	       WeightedVertex += (mul(Pos4,BoneMatrices[BoneIndices.w])*BoneWeights.w).xyz;
 
	return WeightedVertex*kfw;
}

///////////////////////////////////////////////////////////////////////////////

float3 SkinNormal4( int4 BoneIndices, float4 BoneWeights, float3 InNrm )
{
	float4 Nrm4 = float4( InNrm, 0.0f );

	float3 WeightedNormal =  (mul(Nrm4,BoneMatrices[BoneIndices.x])*BoneWeights.x).xyz;
	       WeightedNormal += (mul(Nrm4,BoneMatrices[BoneIndices.y])*BoneWeights.y).xyz;
	       WeightedNormal += (mul(Nrm4,BoneMatrices[BoneIndices.z])*BoneWeights.z).xyz;
	       WeightedNormal += (mul(Nrm4,BoneMatrices[BoneIndices.w])*BoneWeights.w).xyz;

	return normalize(WeightedNormal.xyz);
}