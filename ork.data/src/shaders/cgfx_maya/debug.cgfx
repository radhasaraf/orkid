///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

#include "tanspace.cgh"

string description = "morkshader<debug>";

///////////////////////////////////////////////////////////////////////////////
// water parameters

uniform float time : time;

///////////////////////////////////////////////////////////////////////////////

struct Vertex {
        float4 Position : POSITION;   // in object space
        float4 TexCoord : TEXCOORD0;
        float3 Normal   : NORMAL;
        float3 Binormal : BINORMAL;
        float3 Tangent  : TANGENT;
        float4 Color    : COLOR0;
};

struct Fragment {

        float4 ClipPos : POSITION;  // in clip space
        float4 Color : COLOR;

        float3 UVW0             : TEXCOORD0;
        float3 Normal           : TEXCOORD1;

};

////////////////////////////////////////////////////////////////////////////////

Fragment vs_debug( Vertex VtxIn )
{
    Fragment FragOut;

    time = fmod( time, 10000 );

    //////////////////////////////////////

    float3 camPos = mul(WorldView, VtxIn.Position ).xyz;
    float3 worldPos = mul(World,VtxIn.Position).xyz;

    //////////////////////////////////////

    float3 worldNormal  = normalize( mul( World, float4( VtxIn.Normal,0.0f ) ).xyz );
    float3 worldEye     = ViewIT[3].xyz;
    float3 worldToEye   = normalize( worldEye - worldPos );
    float3 worldToLyt   = worldToEye; //normalize( - SunDir );

    /////////////////////////////////////
    // ( Tangent Space Lighting )

	float3 nbin = normalize( VtxIn.Binormal );
	float3 nnrm = normalize( VtxIn.Normal );

	float3 Tangent = ( cross( nbin, nnrm ) );
	TanLytData tldata = GenTanLytData(	World,
										worldToLyt, worldToEye,
										VtxIn.Normal, VtxIn.Binormal, Tangent
									 );

    /////////////////////////////////////

    //FragOut.TanLight = tldata.TanLyt;
    //FragOut.TanHalf = tldata.TanHalf;
    //FragOut.TanEye = tldata.TanEye;

    //FragOut.VtxPosition = VtxIn.Position.xyz;
    //FragOut.VtxTangent = nbin.xyz; //VtxIn.Tangent.xyz;

    FragOut.Normal = worldNormal;
    
    /////////////////////////////////////

    FragOut.UVW0.x = VtxIn.TexCoord.x;
    FragOut.UVW0.y = 1.0f-VtxIn.TexCoord.y;
    FragOut.UVW0.z = 0.0f;

    /////////////////////////////////////

    float diffuse = saturate( dot( worldNormal, worldToLyt.xyz ) );

    /////////////////////////////////////

    FragOut.Color.xyz = diffuse;
    FragOut.Color.w = 1.0f;
    FragOut.ClipPos = mul(WorldViewProj,VtxIn.Position);
    return FragOut;
}

////////////////////////////////////////////////////////////////////////////////////

float4 ps_debug_uv( Fragment FragIn ) : COLOR
{
    float4 PixelOut;

	float U = fmod( FragIn.UVW0.x, 1.0f );
	float V = fmod( FragIn.UVW0.y, 1.0f );

 PixelOut.rgb = float3( U, V, 0.0f );
     PixelOut.a = 1.0f;
    return PixelOut;
}

////////////////////////////////////////////////////////////////////////////////////

float4 ps_debug_normal( Fragment FragIn ) : COLOR
{
    float4 PixelOut;
	PixelOut.rgb = FragIn.Normal;
    PixelOut.a = 1.0f;
    return PixelOut;
}

///////////////////////////////////////////////////////////////////////////////

technique debug_normal
{
    pass p0
    {
        VertexProgram = compile arbvp1 vs_debug( );
        FragmentProgram = compile arbfp1 ps_debug_normal( );

        Zenable = true;
        ZWriteEnable = true;
        FrontFace = CW; // ccw
        FogEnable = false;
        BlendEnable = false;
        //BlendFunc = int2( SrcAlpha, OneMinusSrcAlpha );
        BlendFunc = int2(SrcAlpha,SrcColor        );
    }
}
