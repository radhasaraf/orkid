Import('env')

if env.get('platform') == 'pc' or env.get('platform') == 'ix':

	import os.path
	from common_build import *
	miniork_tool_env = env.Copy()

	###############################################################################
	## Environment modifications specific to the miniork_tool library
	miniork_tool_env.Append(CPPDEFINES = ['TIXML_WRITE'])
	
	miniork_tool_env.Append(CPPPATH = [miniork_tool_env.get('qtinclude')])
	if miniork_tool_env['ENV'].has_key('DXSDK_DIR'):
		miniork_tool_env.Append(CPPPATH = [orkpath('%s/Include' % miniork_tool_env['ENV']['DXSDK_DIR'])])
		
	miniork_tool_env.Append(LIBPATH = miniork_tool_env.get('qtlib'))

	###############################################################################
	miniork_dir = os.path.normpath(orkpath('%s/%s' % (miniork_tool_env.GetLaunchDir(), miniork_tool_env['ENV']['MINIORK_ROOT'])))
	tool_src = glob_and_strip(miniork_tool_env, orkpath('%s/src/miniork_tool' % miniork_dir), '*.cpp')
	
	# Don't compile the PCH twice
	tool_src.remove('miniork_tool_pch.cpp')

	# This file needs special treatment with special CPPDEFINES. It rides the short bus.
	qtmainwin = orkpath('qtui/qtmainwin.cpp')
	if qtmainwin in tool_src:
		tool_src.remove(qtmainwin)
		qtmainwin_env = miniork_tool_env.Copy()
		qtmainwin_env.Append(CPPDEFINES = [
		'MINIORK_REPOS="\\"%s\\""' % miniork_tool_env['ENV']['TOOL_REPOS'],
		'MINIORK_REVISION="\\"%s\\""' %miniork_tool_env['ENV']['TOOL_REV'],
		'GAME_REPOS="\\"%s\\""' % miniork_tool_env['ENV']['GAME_REPOS'],
		'GAME_REVISION="\\"%s\\""' % miniork_tool_env['ENV']['GAME_REV']])
		tool_src += qtmainwin_env.Object(qtmainwin)

	if miniork_tool_env.get('platform') == 'pc':	
		pch = miniork_tool_env.PCH(orkpath('#%s/src/miniork_tool/miniork_tool_pch.cpp' % miniork_tool_env['ENV']['MINIORK_ROOT']))
		miniork_tool_env['PCH'] = pch[0]
		miniork_tool_env['PCHSTOP'] = 'miniork_tool_pch.h'		
		tool_src += [pch[1]]

	###############################################################################
	## Building the miniork_tool library target	
	#build_target = get_build_target(miniork_tool_env, '#lib', 'miniork_tool')
	build_target = orkpath('#%s/lib/%s/%s/%s/miniork_tool' % (miniork_tool_env['ENV']['MINIORK_ROOT'], miniork_tool_env.get('platform'), miniork_tool_env.get('tool'), miniork_tool_env.get('config')))

	dependencies = ['miniork', 'Qt', 'OpenGL', 'X11', 'DevIL', 'ALSA', 'ColladaMaya']
	miniork_tool = miniork_tool_env.StaticLibrary(build_target, tool_src, LIBS = resolve_platform_libnames(miniork_tool_env, dependencies))
	if miniork_tool: env['LIBNAMES']['miniork_tool'] = ['miniork_tool']

	miniork_tool_env.Alias('miniork_tool', miniork_tool)

	Return('miniork_tool')