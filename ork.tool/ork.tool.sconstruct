import os, glob, string
import ork.build.utils as obu
import ork.build.slnprj as sln
import ork.build.common as cmn

# set scons options ######################

SetOption('implicit_cache',1)
Decider('MD5-timestamp')
VariantDir( 'obj', 'src', duplicate=0  )
VariantDir( 'obji', 'inc', duplicate=0  )
SetOption('num_jobs', obu.num_cores) 

#
TARGET = string.join(COMMAND_LINE_TARGETS)
is_prep = (TARGET=="prep")
is_install = (TARGET=="install")
#

if is_install:
  obu.install_headers("inc/orktool")
  obu.install_headers("inc/pkg")

##########################################

class orktool:
  def __init__(self):   

    if is_prep:
      return

    BasicEnv = Environment( ENV=os.environ, tools=['default','qt5'] )
    
    ##########################################

    SRC_FOLDERS  = " . manip qtui toolcore ged "
    SRC_FOLDERS += " filter filter/scene filter/aud "
    SRC_FOLDERS += " filter/gfx filter/gfx/nvtt filter/gfx/texture "
    SRC_FOLDERS += " filter/gfx/tristripper filter/gfx/collada "
    SRC_FOLDERS += " filter/gfx/meshutil ent ent/manip"

    ORKLIBS = sln.xflibnams("ork.%s ","core lev2 ent fcollada" )

    ##########################################

    prj = sln.Project(BasicEnv,"ork.tool")
    prj.SetSrcBase( "src" )
    prj.AddIncludePaths( "../ork.core/inc/" )
    prj.AddIncludePaths( "../ork.lev2/inc/" )
    prj.AddIncludePaths( "../ork.ent/inc/" )
    prj.AddIncludePaths( "/usr/include/python2.7" )
    prj.AddIncludePaths( "inc" )
    prj.AddIncludePaths( "src" )
    prj.AddIncludePaths( "%s/include/bullet"%sln.stage_dir )
    prj.AddIncludePaths( "%s/include/fcollada/FCollada"%sln.stage_dir )
    prj.AddIncludePaths( "%s/include/fcollada/FCollada/LibXML/include"%sln.stage_dir )
    prj.AddFolders( SRC_FOLDERS, "*.cpp" )
    prj.AddDefines( "LINUX" )
    prj.AddQt5Modules("QtGui QtCore QtWidgets")

    for item in cmn.recursive_glob("inc","*.h"):
        prj.ExplicitMocs += BasicEnv.ExplicitMoc5("mocs/%s.moc.cpp"%item, item )

    #########################
    ## OSX libs
    #########################
    if prj.IsOsx:
      #print "osx"
      prj.AddFrameworks("OpenGL QtCore QtGui QtWidgets" )
      prj.AddFrameworks("CoreMIDI CoreAudio AudioUnit AudioToolbox" )
      prj.AddFrameworks("Carbon Foundation ApplicationServices" )
      prj.AddFrameworks("AppKit QuartzComposer")
    #########################
    ## IX libs
    #########################
    elif prj.IsIx:
      LIBS = "GL QtCore QtGui xcb OpenImageIO OpenImageIO_Util"
      #LIBS += " rihelper 3delight "
      #prj.AddLibPaths( "%s/3dl/lib"%sln.stage_dir )
      prj.AddLibs( LIBS )
    #########################
    ## common libs
    #########################
    prj.AddLibPaths("/usr/local/lib/static") # because nvtt is a PITA
    #prj.AddLibPaths( "/usr/include/python2.7" )
    prj.AddLibsWithSuffix( ORKLIBS )
    prj.AddLibsWithSuffix( "libtweakout" )
    prj.AddLibsWithSuffix( "ork.unittestpp" )
    prj.AddLibs( "nvtt nvimage nvcore nvmath nvthread bc7 squish bc6h" )
    prj.AddLibs( "python2.7 boost_python-mt" )
    #########################
    prj.Configure()
    self.tool_lib = prj.SharedLibrary( )

    ##########################################

    #print bullet_libs

    prj_test = sln.Project(BasicEnv,"ork.tool.test")
    prj_test.SetSrcBase( "src" )
    prj_test.AddIncludePaths( "../ork.core/inc/" )
    prj_test.AddIncludePaths( "../ork.lev2/inc/" )
    prj_test.AddIncludePaths( "../ork.ent/inc/" )
    prj_test.AddIncludePaths( "inc" )
    prj_test.AddIncludePaths( "%s/include"%sln.stage_dir )
    prj_test.AddIncludePaths( "%s/include/bullet/src"%sln.stage_dir )
    prj_test.AddLibPaths( "%s/lib"%sln.stage_dir )
    prj_test.AddFolders( "test", "*.cpp" )
    prj_test.AddLibsWithSuffix( "ork.unittestpp" )
    prj_test.AddLibsWithSuffix( ORKLIBS )
    prj_test.AddProjectDep( prj )
    prj_test.AddQt5Modules("QtGui QtCore QtWidgets")
    prj_test.Configure()
    self.test_prg = prj_test.Program()
    Depends( self.test_prg, self.tool_lib )

    bundle = prj_test.CompileEnv.Command( 
      target = "%s/bundle/OrkidTool.app" % sln.stage_dir,
      source = self.test_prg,
      action = "ork.bundle.make.py" )

    Depends( bundle, self.test_prg )

    self.bundle = bundle

##########################################

a = orktool()
ret = list()
if False==is_prep:
  ret += a.bundle
  ret += a.test_prg
  ret += a.tool_lib
Return('ret')

##########################################

